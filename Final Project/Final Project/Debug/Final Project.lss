
Final Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001596  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000142  00800060  00001596  0000162a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008001a2  008001a2  0000176c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000179c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000038ab  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f8  00000000  00000000  0000542b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000024cc  00000000  00000000  00006623  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000844  00000000  00000000  00008af0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000be2  00000000  00000000  00009334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000276b  00000000  00000000  00009f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002c8  00000000  00000000  0000c681  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__vector_10>
      2c:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3a       	cpi	r26, 0xAB	; 171
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <main>
      8a:	0c 94 c9 0a 	jmp	0x1592	; 0x1592 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <func_RXC_ISR>:
}

// Receive the data sent through UART in the uart_data variable
void func_RXC_ISR()
{
	uart_data = UART_Receive();
      92:	0e 94 ff 09 	call	0x13fe	; 0x13fe <UART_Receive>
      96:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <uart_data>
      9a:	08 95       	ret

0000009c <app_init>:

//initialization function // void setup
void app_init()
{
	// Initiating the LCD
	LCD_init();
      9c:	0e 94 47 05 	call	0xa8e	; 0xa8e <LCD_init>
	// Initiating Keypad
	KPD_init();
      a0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <KPD_init>
	// Initiating LEDs for temperature stats Low , Normal and High
	LED_init(LED_LOW);
      a4:	64 e0       	ldi	r22, 0x04	; 4
      a6:	82 e6       	ldi	r24, 0x62	; 98
      a8:	0e 94 70 06 	call	0xce0	; 0xce0 <LED_init>
	LED_init(LED_NORMAL);
      ac:	65 e0       	ldi	r22, 0x05	; 5
      ae:	82 e6       	ldi	r24, 0x62	; 98
      b0:	0e 94 70 06 	call	0xce0	; 0xce0 <LED_init>
	LED_init(LED_HIGH);
      b4:	66 e0       	ldi	r22, 0x06	; 6
      b6:	82 e6       	ldi	r24, 0x62	; 98
      b8:	0e 94 70 06 	call	0xce0	; 0xce0 <LED_init>
	// Initiating BUZZER for Fire alarm
	BUZZER_init(BUZZER_1);
      bc:	67 e0       	ldi	r22, 0x07	; 7
      be:	82 e6       	ldi	r24, 0x62	; 98
      c0:	0e 94 11 04 	call	0x822	; 0x822 <BUZZER_init>
	// Initiating EEPROM to save High and ?Low temperature values
	EEPROM_INIT();
      c4:	0e 94 1d 04 	call	0x83a	; 0x83a <EEPROM_INIT>
	// Initiating ADC for temperature sensor
	ADC_init();
      c8:	0e 94 83 06 	call	0xd06	; 0xd06 <ADC_init>
	// Initiating external interrupt 0 to sense the interrupt at the falling edge
	EXT_INT_0_init(falling_edge_sense);
      cc:	82 e0       	ldi	r24, 0x02	; 2
      ce:	0e 94 af 08 	call	0x115e	; 0x115e <EXT_INT_0_init>
	// Initiating UART with baud rate of 9600
	UART_Init(BAUD_RATE);
      d2:	80 e8       	ldi	r24, 0x80	; 128
      d4:	95 e2       	ldi	r25, 0x25	; 37
      d6:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <UART_Init>
	UART_setCallBcak(func_RXC_ISR);
      da:	89 e4       	ldi	r24, 0x49	; 73
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	0e 94 16 0a 	call	0x142c	; 0x142c <UART_setCallBcak>
	UART_RXC_interruptEnable();
      e2:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <UART_RXC_interruptEnable>
	// Initiating Timer0 --> PWM phase correct mode 
	timer0_init(PWM_PHASE_CORRECT_MODE, PRESCALAR_256);
      e6:	64 e0       	ldi	r22, 0x04	; 4
      e8:	83 e0       	ldi	r24, 0x03	; 3
      ea:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <timer0_init>
	// Initiating button and set it as pull up
	button_init(BUTTON);
      ee:	62 e0       	ldi	r22, 0x02	; 2
      f0:	84 e6       	ldi	r24, 0x64	; 100
      f2:	0e 94 09 04 	call	0x812	; 0x812 <button_init>
	button_set_pullUp(BUTTON);
      f6:	62 e0       	ldi	r22, 0x02	; 2
      f8:	84 e6       	ldi	r24, 0x64	; 100
      fa:	0e 94 0d 04 	call	0x81a	; 0x81a <button_set_pullUp>
	// Displaying project name on LCD at the start
	LCD_sendString("Temp. control");
      fe:	80 e6       	ldi	r24, 0x60	; 96
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LCD_sendString>
	LCD_displayStringRowColumn(1,0, "Project");
     106:	4e e6       	ldi	r20, 0x6E	; 110
     108:	50 e0       	ldi	r21, 0x00	; 0
     10a:	60 e0       	ldi	r22, 0x00	; 0
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	0e 94 ef 05 	call	0xbde	; 0xbde <LCD_displayStringRowColumn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     112:	2f ef       	ldi	r18, 0xFF	; 255
     114:	82 e5       	ldi	r24, 0x52	; 82
     116:	97 e0       	ldi	r25, 0x07	; 7
     118:	21 50       	subi	r18, 0x01	; 1
     11a:	80 40       	sbci	r24, 0x00	; 0
     11c:	90 40       	sbci	r25, 0x00	; 0
     11e:	e1 f7       	brne	.-8      	; 0x118 <app_init+0x7c>
     120:	00 c0       	rjmp	.+0      	; 0x122 <app_init+0x86>
     122:	00 00       	nop
     124:	08 95       	ret

00000126 <Normal_temp_mode>:
	}
}

// Normal temperature mode --> current temperature is between High and Low values
void Normal_temp_mode(uint8_t *t_current , uint32_t *ADC_val, uint8_t temp_H, uint8_t temp_L)
{
     126:	ef 92       	push	r14
     128:	ff 92       	push	r15
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	cf 93       	push	r28
     130:	df 93       	push	r29
     132:	ec 01       	movw	r28, r24
     134:	8b 01       	movw	r16, r22
     136:	e4 2e       	mov	r14, r20
     138:	f2 2e       	mov	r15, r18
	// Send "Normal state" message to the user through UART 
	UART_sendString("Normal state");
     13a:	86 e7       	ldi	r24, 0x76	; 118
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 03 0a 	call	0x1406	; 0x1406 <UART_sendString>
	// Send "Enter" to display next message in new line
	UART_Transmit(13);
     142:	8d e0       	ldi	r24, 0x0D	; 13
     144:	0e 94 f6 09 	call	0x13ec	; 0x13ec <UART_Transmit>
	// Display normal state on LCD
	LCD_displayStringRowColumn(1,0,"Normal, T=     ");
     148:	43 e8       	ldi	r20, 0x83	; 131
     14a:	50 e0       	ldi	r21, 0x00	; 0
     14c:	60 e0       	ldi	r22, 0x00	; 0
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	0e 94 ef 05 	call	0xbde	; 0xbde <LCD_displayStringRowColumn>
	// Turn on Normal LED
	LED_ON(LED_NORMAL);
     154:	65 e0       	ldi	r22, 0x05	; 5
     156:	82 e6       	ldi	r24, 0x62	; 98
     158:	0e 94 74 06 	call	0xce8	; 0xce8 <LED_ON>
	// Turn off Low and High LEDs
	LED_OFF(LED_LOW);
     15c:	64 e0       	ldi	r22, 0x04	; 4
     15e:	82 e6       	ldi	r24, 0x62	; 98
     160:	0e 94 78 06 	call	0xcf0	; 0xcf0 <LED_OFF>
	LED_OFF(LED_HIGH);
     164:	66 e0       	ldi	r22, 0x06	; 6
     166:	82 e6       	ldi	r24, 0x62	; 98
     168:	0e 94 78 06 	call	0xcf0	; 0xcf0 <LED_OFF>
	// Turn off BUZZER
	BUZZER_OFF(BUZZER_1);
     16c:	67 e0       	ldi	r22, 0x07	; 7
     16e:	82 e6       	ldi	r24, 0x62	; 98
     170:	0e 94 19 04 	call	0x832	; 0x832 <BUZZER_OFF>
	// Run the fan at half speed (255/2)
	timer0_dutyCycle(PWM_PHASE_CORRECT_MODE, 128);
     174:	60 e8       	ldi	r22, 0x80	; 128
     176:	83 e0       	ldi	r24, 0x03	; 3
     178:	0e 94 76 09 	call	0x12ec	; 0x12ec <timer0_dutyCycle>
	// Keep the normal temperature mode running while current temperature is still in normal range
	while ((*t_current >= temp_L  && *t_current <= temp_H) && stop_flag == 0)
     17c:	28 c0       	rjmp	.+80     	; 0x1ce <Normal_temp_mode+0xa8>
	{
		// Keep reading ADC value and calculate the current temperature
		*ADC_val = ADC_read(ADC_CH0);
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	0e 94 9b 06 	call	0xd36	; 0xd36 <ADC_read>
     184:	9c 01       	movw	r18, r24
     186:	40 e0       	ldi	r20, 0x00	; 0
     188:	50 e0       	ldi	r21, 0x00	; 0
     18a:	f8 01       	movw	r30, r16
     18c:	20 83       	st	Z, r18
     18e:	31 83       	std	Z+1, r19	; 0x01
     190:	42 83       	std	Z+2, r20	; 0x02
     192:	53 83       	std	Z+3, r21	; 0x03
		*t_current = ((500*(*ADC_val))/1023);
     194:	a4 ef       	ldi	r26, 0xF4	; 244
     196:	b1 e0       	ldi	r27, 0x01	; 1
     198:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__muluhisi3>
     19c:	2f ef       	ldi	r18, 0xFF	; 255
     19e:	33 e0       	ldi	r19, 0x03	; 3
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	50 e0       	ldi	r21, 0x00	; 0
     1a4:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__udivmodsi4>
     1a8:	28 83       	st	Y, r18
		// Display the current temperature on the LCD
		LCD_displayIntegerRowColumn(1,12, *t_current);
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	40 e0       	ldi	r20, 0x00	; 0
     1ae:	50 e0       	ldi	r21, 0x00	; 0
     1b0:	6c e0       	ldi	r22, 0x0C	; 12
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <LCD_displayIntegerRowColumn>
		// Keep reading the pressed key from the Keypad
		data = KPD_get_key();
     1b8:	0e 94 9c 04 	call	0x938	; 0x938 <KPD_get_key>
     1bc:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <data>
		// If user pressed 'on'
		if (data == 'c')
     1c0:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <data>
     1c4:	83 36       	cpi	r24, 0x63	; 99
     1c6:	19 f4       	brne	.+6      	; 0x1ce <Normal_temp_mode+0xa8>
		{
			// Set the stop flag to 1 ---> Control system will stop and will return to home screen
			stop_flag = 1;
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>
	// Turn off BUZZER
	BUZZER_OFF(BUZZER_1);
	// Run the fan at half speed (255/2)
	timer0_dutyCycle(PWM_PHASE_CORRECT_MODE, 128);
	// Keep the normal temperature mode running while current temperature is still in normal range
	while ((*t_current >= temp_L  && *t_current <= temp_H) && stop_flag == 0)
     1ce:	88 81       	ld	r24, Y
     1d0:	8f 15       	cp	r24, r15
     1d2:	30 f0       	brcs	.+12     	; 0x1e0 <Normal_temp_mode+0xba>
     1d4:	e8 16       	cp	r14, r24
     1d6:	20 f0       	brcs	.+8      	; 0x1e0 <Normal_temp_mode+0xba>
     1d8:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
     1dc:	88 23       	and	r24, r24
     1de:	79 f2       	breq	.-98     	; 0x17e <Normal_temp_mode+0x58>
		{
			// Set the stop flag to 1 ---> Control system will stop and will return to home screen
			stop_flag = 1;
		}
	}
}
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	1f 91       	pop	r17
     1e6:	0f 91       	pop	r16
     1e8:	ff 90       	pop	r15
     1ea:	ef 90       	pop	r14
     1ec:	08 95       	ret

000001ee <High_temp_mode>:

// High temperature mode --> current temperature is between High and fire alarm values
void High_temp_mode(uint8_t *t_current , uint32_t *ADC_val, uint8_t temp_H, uint8_t temp_L)
{
     1ee:	ff 92       	push	r15
     1f0:	0f 93       	push	r16
     1f2:	1f 93       	push	r17
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	ec 01       	movw	r28, r24
     1fa:	8b 01       	movw	r16, r22
     1fc:	f4 2e       	mov	r15, r20
	// Send "High state" message to the user through UART 
	UART_sendString("High State");
     1fe:	83 e9       	ldi	r24, 0x93	; 147
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 03 0a 	call	0x1406	; 0x1406 <UART_sendString>
	// Send "Enter" to display next message in new line
	UART_Transmit(13);
     206:	8d e0       	ldi	r24, 0x0D	; 13
     208:	0e 94 f6 09 	call	0x13ec	; 0x13ec <UART_Transmit>
	// Display high state on LCD
	LCD_displayStringRowColumn(1,0,"High  , T=    ");
     20c:	4e e9       	ldi	r20, 0x9E	; 158
     20e:	50 e0       	ldi	r21, 0x00	; 0
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	81 e0       	ldi	r24, 0x01	; 1
     214:	0e 94 ef 05 	call	0xbde	; 0xbde <LCD_displayStringRowColumn>
	// Turn off normal and low LEDs
	LED_OFF(LED_NORMAL);
     218:	65 e0       	ldi	r22, 0x05	; 5
     21a:	82 e6       	ldi	r24, 0x62	; 98
     21c:	0e 94 78 06 	call	0xcf0	; 0xcf0 <LED_OFF>
	LED_OFF(LED_LOW);
     220:	64 e0       	ldi	r22, 0x04	; 4
     222:	82 e6       	ldi	r24, 0x62	; 98
     224:	0e 94 78 06 	call	0xcf0	; 0xcf0 <LED_OFF>
	// Turn on high LED
	LED_ON(LED_HIGH);
     228:	66 e0       	ldi	r22, 0x06	; 6
     22a:	82 e6       	ldi	r24, 0x62	; 98
     22c:	0e 94 74 06 	call	0xce8	; 0xce8 <LED_ON>
	// Turn off BUZZER
	BUZZER_OFF(BUZZER_1);
     230:	67 e0       	ldi	r22, 0x07	; 7
     232:	82 e6       	ldi	r24, 0x62	; 98
     234:	0e 94 19 04 	call	0x832	; 0x832 <BUZZER_OFF>
	// Fan runs at full speed
	timer0_dutyCycle(PWM_PHASE_CORRECT_MODE, 255);
     238:	6f ef       	ldi	r22, 0xFF	; 255
     23a:	83 e0       	ldi	r24, 0x03	; 3
     23c:	0e 94 76 09 	call	0x12ec	; 0x12ec <timer0_dutyCycle>
	// Keep the high temperature mode running while current temperature is still in high range
	while (*t_current > temp_H  && *t_current < 70 && stop_flag == 0)
     240:	28 c0       	rjmp	.+80     	; 0x292 <High_temp_mode+0xa4>
	{
		// Keep reading ADC value and calculate the current temperature
		*ADC_val = ADC_read(ADC_CH0);
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	0e 94 9b 06 	call	0xd36	; 0xd36 <ADC_read>
     248:	9c 01       	movw	r18, r24
     24a:	40 e0       	ldi	r20, 0x00	; 0
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	f8 01       	movw	r30, r16
     250:	20 83       	st	Z, r18
     252:	31 83       	std	Z+1, r19	; 0x01
     254:	42 83       	std	Z+2, r20	; 0x02
     256:	53 83       	std	Z+3, r21	; 0x03
		*t_current = ((500*(*ADC_val))/1023);
     258:	a4 ef       	ldi	r26, 0xF4	; 244
     25a:	b1 e0       	ldi	r27, 0x01	; 1
     25c:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__muluhisi3>
     260:	2f ef       	ldi	r18, 0xFF	; 255
     262:	33 e0       	ldi	r19, 0x03	; 3
     264:	40 e0       	ldi	r20, 0x00	; 0
     266:	50 e0       	ldi	r21, 0x00	; 0
     268:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__udivmodsi4>
     26c:	28 83       	st	Y, r18
		// Display the current temperature on the LCD
		LCD_displayIntegerRowColumn(1,12, *t_current);
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	40 e0       	ldi	r20, 0x00	; 0
     272:	50 e0       	ldi	r21, 0x00	; 0
     274:	6c e0       	ldi	r22, 0x0C	; 12
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	0e 94 5f 06 	call	0xcbe	; 0xcbe <LCD_displayIntegerRowColumn>
		// Keep reading the pressed key from the Keypad
		data = KPD_get_key();
     27c:	0e 94 9c 04 	call	0x938	; 0x938 <KPD_get_key>
     280:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <data>
		// If user pressed 'on'
		if (data == 'c')
     284:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <data>
     288:	83 36       	cpi	r24, 0x63	; 99
     28a:	19 f4       	brne	.+6      	; 0x292 <High_temp_mode+0xa4>
		{
			// Set the stop flag to 1 ---> Control system will stop and will return to home screen
			stop_flag = 1;
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>
	// Turn off BUZZER
	BUZZER_OFF(BUZZER_1);
	// Fan runs at full speed
	timer0_dutyCycle(PWM_PHASE_CORRECT_MODE, 255);
	// Keep the high temperature mode running while current temperature is still in high range
	while (*t_current > temp_H  && *t_current < 70 && stop_flag == 0)
     292:	88 81       	ld	r24, Y
     294:	f8 16       	cp	r15, r24
     296:	30 f4       	brcc	.+12     	; 0x2a4 <High_temp_mode+0xb6>
     298:	86 34       	cpi	r24, 0x46	; 70
     29a:	20 f4       	brcc	.+8      	; 0x2a4 <High_temp_mode+0xb6>
     29c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
     2a0:	88 23       	and	r24, r24
     2a2:	79 f2       	breq	.-98     	; 0x242 <High_temp_mode+0x54>
		{
			// Set the stop flag to 1 ---> Control system will stop and will return to home screen
			stop_flag = 1;
		}
	}
}
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	ff 90       	pop	r15
     2ae:	08 95       	ret

000002b0 <Low_temp_mode>:

// Low temperature mode --> current temperature is below low value
void Low_temp_mode(uint8_t *t_current , uint32_t *ADC_val, uint8_t temp_H, uint8_t temp_L)
{
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	ec 01       	movw	r28, r24
     2bc:	8b 01       	movw	r16, r22
     2be:	f2 2e       	mov	r15, r18
	// Send "Low state" message to the user through UART 
	UART_sendString("Low state");
     2c0:	8d ea       	ldi	r24, 0xAD	; 173
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	0e 94 03 0a 	call	0x1406	; 0x1406 <UART_sendString>
	// Send "Enter" to display next message in new line
	UART_Transmit(13);
     2c8:	8d e0       	ldi	r24, 0x0D	; 13
     2ca:	0e 94 f6 09 	call	0x13ec	; 0x13ec <UART_Transmit>
	// Display low state on LCD
	LCD_displayStringRowColumn(1,0,"Low   , T=    ");
     2ce:	47 eb       	ldi	r20, 0xB7	; 183
     2d0:	50 e0       	ldi	r21, 0x00	; 0
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	0e 94 ef 05 	call	0xbde	; 0xbde <LCD_displayStringRowColumn>
	// Turn off normal LED
	LED_OFF(LED_NORMAL);
     2da:	65 e0       	ldi	r22, 0x05	; 5
     2dc:	82 e6       	ldi	r24, 0x62	; 98
     2de:	0e 94 78 06 	call	0xcf0	; 0xcf0 <LED_OFF>
	// Turn on low LED
	LED_ON(LED_LOW);
     2e2:	64 e0       	ldi	r22, 0x04	; 4
     2e4:	82 e6       	ldi	r24, 0x62	; 98
     2e6:	0e 94 74 06 	call	0xce8	; 0xce8 <LED_ON>
	// Turn off high LED
	LED_OFF(LED_HIGH);
     2ea:	66 e0       	ldi	r22, 0x06	; 6
     2ec:	82 e6       	ldi	r24, 0x62	; 98
     2ee:	0e 94 78 06 	call	0xcf0	; 0xcf0 <LED_OFF>
	// Turn off BUZZER
	BUZZER_OFF(BUZZER_1);
     2f2:	67 e0       	ldi	r22, 0x07	; 7
     2f4:	82 e6       	ldi	r24, 0x62	; 98
     2f6:	0e 94 19 04 	call	0x832	; 0x832 <BUZZER_OFF>
	// Fan stop
	timer0_dutyCycle(PWM_PHASE_CORRECT_MODE, 0);
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	83 e0       	ldi	r24, 0x03	; 3
     2fe:	0e 94 76 09 	call	0x12ec	; 0x12ec <timer0_dutyCycle>
	// Keep the low temperature mode running while current temperature is still in low range
	while (*t_current < temp_L && stop_flag == 0)
     302:	31 c0       	rjmp	.+98     	; 0x366 <Low_temp_mode+0xb6>
	{
		// Keep reading ADC value and calculate the current temperature
		*ADC_val = ADC_read(ADC_CH0);
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	0e 94 9b 06 	call	0xd36	; 0xd36 <ADC_read>
     30a:	9c 01       	movw	r18, r24
     30c:	40 e0       	ldi	r20, 0x00	; 0
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	f8 01       	movw	r30, r16
     312:	20 83       	st	Z, r18
     314:	31 83       	std	Z+1, r19	; 0x01
     316:	42 83       	std	Z+2, r20	; 0x02
     318:	53 83       	std	Z+3, r21	; 0x03
		*t_current = ((500*(*ADC_val))/1023);
     31a:	a4 ef       	ldi	r26, 0xF4	; 244
     31c:	b1 e0       	ldi	r27, 0x01	; 1
     31e:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__muluhisi3>
     322:	2f ef       	ldi	r18, 0xFF	; 255
     324:	33 e0       	ldi	r19, 0x03	; 3
     326:	40 e0       	ldi	r20, 0x00	; 0
     328:	50 e0       	ldi	r21, 0x00	; 0
     32a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__udivmodsi4>
     32e:	28 83       	st	Y, r18
		//If current temperature falls from 10 to 9 --> clear it to not show it as 90
		if (*t_current == 9)
     330:	29 30       	cpi	r18, 0x09	; 9
     332:	31 f4       	brne	.+12     	; 0x340 <Low_temp_mode+0x90>
		{
			LCD_displayStringRowColumn(1,12, "  ");
     334:	40 e9       	ldi	r20, 0x90	; 144
     336:	50 e0       	ldi	r21, 0x00	; 0
     338:	6c e0       	ldi	r22, 0x0C	; 12
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	0e 94 ef 05 	call	0xbde	; 0xbde <LCD_displayStringRowColumn>
		}
		// Display the current temperature on the LCD
		LCD_displayIntegerRowColumn(1,12, *t_current);
     340:	28 81       	ld	r18, Y
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	40 e0       	ldi	r20, 0x00	; 0
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	6c e0       	ldi	r22, 0x0C	; 12
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	0e 94 5f 06 	call	0xcbe	; 0xcbe <LCD_displayIntegerRowColumn>
		// Keep reading the pressed key from the Keypad
		data = KPD_get_key();
     350:	0e 94 9c 04 	call	0x938	; 0x938 <KPD_get_key>
     354:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <data>
		// If user pressed 'on'
		if (data == 'c')
     358:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <data>
     35c:	83 36       	cpi	r24, 0x63	; 99
     35e:	19 f4       	brne	.+6      	; 0x366 <Low_temp_mode+0xb6>
		{
			// Set the stop flag to 1 ---> Control system will stop and will return to home screen
			stop_flag = 1;
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>
	// Turn off BUZZER
	BUZZER_OFF(BUZZER_1);
	// Fan stop
	timer0_dutyCycle(PWM_PHASE_CORRECT_MODE, 0);
	// Keep the low temperature mode running while current temperature is still in low range
	while (*t_current < temp_L && stop_flag == 0)
     366:	88 81       	ld	r24, Y
     368:	8f 15       	cp	r24, r15
     36a:	20 f4       	brcc	.+8      	; 0x374 <Low_temp_mode+0xc4>
     36c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
     370:	88 23       	and	r24, r24
     372:	41 f2       	breq	.-112    	; 0x304 <Low_temp_mode+0x54>
		{
			// Set the stop flag to 1 ---> Control system will stop and will return to home screen
			stop_flag = 1;
		}
	}
}
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	ff 90       	pop	r15
     37e:	08 95       	ret

00000380 <Fire_alarm_mode>:

// Fire alarm mode --> current temperature is above 70
void Fire_alarm_mode(uint8_t *t_current , uint32_t *ADC_val)
{
     380:	0f 93       	push	r16
     382:	1f 93       	push	r17
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	ec 01       	movw	r28, r24
     38a:	8b 01       	movw	r16, r22
	// Send "Fire Alarm!!" message to the user through UART 
	UART_sendString("Fire Alarm!!");
     38c:	86 ec       	ldi	r24, 0xC6	; 198
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 03 0a 	call	0x1406	; 0x1406 <UART_sendString>
	// Send "Enter" to display next message in new line
	UART_Transmit(13);
     394:	8d e0       	ldi	r24, 0x0D	; 13
     396:	0e 94 f6 09 	call	0x13ec	; 0x13ec <UART_Transmit>
	// Display fire alarm on LCD
	LCD_clear_screen();
     39a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_clear_screen>
	LCD_sendString("Fire Alarm!!");
     39e:	86 ec       	ldi	r24, 0xC6	; 198
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LCD_sendString>
	// Turn on all LEDs
	LED_ON(LED_NORMAL);
     3a6:	65 e0       	ldi	r22, 0x05	; 5
     3a8:	82 e6       	ldi	r24, 0x62	; 98
     3aa:	0e 94 74 06 	call	0xce8	; 0xce8 <LED_ON>
	LED_ON(LED_LOW);
     3ae:	64 e0       	ldi	r22, 0x04	; 4
     3b0:	82 e6       	ldi	r24, 0x62	; 98
     3b2:	0e 94 74 06 	call	0xce8	; 0xce8 <LED_ON>
	LED_ON(LED_HIGH);
     3b6:	66 e0       	ldi	r22, 0x06	; 6
     3b8:	82 e6       	ldi	r24, 0x62	; 98
     3ba:	0e 94 74 06 	call	0xce8	; 0xce8 <LED_ON>
	// Turn on BUZZER
	BUZZER_ON(BUZZER_1);
     3be:	67 e0       	ldi	r22, 0x07	; 7
     3c0:	82 e6       	ldi	r24, 0x62	; 98
     3c2:	0e 94 15 04 	call	0x82a	; 0x82a <BUZZER_ON>
	// Fan runs at full speed
	timer0_dutyCycle(PWM_PHASE_CORRECT_MODE, 255);
     3c6:	6f ef       	ldi	r22, 0xFF	; 255
     3c8:	83 e0       	ldi	r24, 0x03	; 3
     3ca:	0e 94 76 09 	call	0x12ec	; 0x12ec <timer0_dutyCycle>
	// Keep the fire alarm  mode running while current temperature is still in fire alarm range
	while (*t_current >= 70 && stop_flag == 0)
     3ce:	21 c0       	rjmp	.+66     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	{
		// Keep reading ADC value and calculate the current temperature
		*ADC_val = ADC_read(ADC_CH0);
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	0e 94 9b 06 	call	0xd36	; 0xd36 <ADC_read>
     3d6:	9c 01       	movw	r18, r24
     3d8:	40 e0       	ldi	r20, 0x00	; 0
     3da:	50 e0       	ldi	r21, 0x00	; 0
     3dc:	f8 01       	movw	r30, r16
     3de:	20 83       	st	Z, r18
     3e0:	31 83       	std	Z+1, r19	; 0x01
     3e2:	42 83       	std	Z+2, r20	; 0x02
     3e4:	53 83       	std	Z+3, r21	; 0x03
		*t_current = ((500*(*ADC_val))/1023);
     3e6:	a4 ef       	ldi	r26, 0xF4	; 244
     3e8:	b1 e0       	ldi	r27, 0x01	; 1
     3ea:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__muluhisi3>
     3ee:	2f ef       	ldi	r18, 0xFF	; 255
     3f0:	33 e0       	ldi	r19, 0x03	; 3
     3f2:	40 e0       	ldi	r20, 0x00	; 0
     3f4:	50 e0       	ldi	r21, 0x00	; 0
     3f6:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__udivmodsi4>
     3fa:	28 83       	st	Y, r18
		// Keep reading the pressed key from the Keypad
		data = KPD_get_key();
     3fc:	0e 94 9c 04 	call	0x938	; 0x938 <KPD_get_key>
     400:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <data>
		// If user pressed 'on'
		if (data == 'c')
     404:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <data>
     408:	83 36       	cpi	r24, 0x63	; 99
     40a:	19 f4       	brne	.+6      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
		{
			// Set the stop flag to 1 ---> Control system will stop and will return to home screen
			stop_flag = 1;
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>
	// Turn on BUZZER
	BUZZER_ON(BUZZER_1);
	// Fan runs at full speed
	timer0_dutyCycle(PWM_PHASE_CORRECT_MODE, 255);
	// Keep the fire alarm  mode running while current temperature is still in fire alarm range
	while (*t_current >= 70 && stop_flag == 0)
     412:	88 81       	ld	r24, Y
     414:	86 34       	cpi	r24, 0x46	; 70
     416:	20 f0       	brcs	.+8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     418:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
     41c:	88 23       	and	r24, r24
     41e:	c1 f2       	breq	.-80     	; 0x3d0 <Fire_alarm_mode+0x50>
		{
			// Set the stop flag to 1 ---> Control system will stop and will return to home screen
			stop_flag = 1;
		}
	}
}
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	08 95       	ret

0000042a <mode_1>:
}


// Mode 1 for Starting the control system
void mode_1(uint8_t temp_H , uint8_t temp_L)
{
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	00 d0       	rcall	.+0      	; 0x434 <mode_1+0xa>
     434:	00 d0       	rcall	.+0      	; 0x436 <mode_1+0xc>
     436:	1f 92       	push	r1
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	08 2f       	mov	r16, r24
     43e:	16 2f       	mov	r17, r22
	// Defining variables for ADC value and the current temperature read from the sensor
	uint32_t ADC_val = 0;
     440:	19 82       	std	Y+1, r1	; 0x01
     442:	1a 82       	std	Y+2, r1	; 0x02
     444:	1b 82       	std	Y+3, r1	; 0x03
     446:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t t_current = 0;
     448:	1d 82       	std	Y+5, r1	; 0x05
	
	LCD_clear_screen();
     44a:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_clear_screen>
	// Control system will run while the stop flag value is 0
	// When the stop flag value is set to 1 it will stop
	while (stop_flag == 0)
     44e:	56 c0       	rjmp	.+172    	; 0x4fc <mode_1+0xd2>
	{
		LCD_displayStringRowColumn(0,0,"System under control");
     450:	43 ed       	ldi	r20, 0xD3	; 211
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	0e 94 ef 05 	call	0xbde	; 0xbde <LCD_displayStringRowColumn>
		// Reading ADC value from channel 0
		ADC_val = ADC_read(ADC_CH0);
     45c:	80 e0       	ldi	r24, 0x00	; 0
     45e:	0e 94 9b 06 	call	0xd36	; 0xd36 <ADC_read>
     462:	9c 01       	movw	r18, r24
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	29 83       	std	Y+1, r18	; 0x01
     46a:	3a 83       	std	Y+2, r19	; 0x02
     46c:	4b 83       	std	Y+3, r20	; 0x03
     46e:	5c 83       	std	Y+4, r21	; 0x04
		// Calculating the current temperature value 
		t_current = ((500*ADC_val)/1023);
     470:	a4 ef       	ldi	r26, 0xF4	; 244
     472:	b1 e0       	ldi	r27, 0x01	; 1
     474:	0e 94 9b 0a 	call	0x1536	; 0x1536 <__muluhisi3>
     478:	2f ef       	ldi	r18, 0xFF	; 255
     47a:	33 e0       	ldi	r19, 0x03	; 3
     47c:	40 e0       	ldi	r20, 0x00	; 0
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__udivmodsi4>
     484:	82 2f       	mov	r24, r18
     486:	2d 83       	std	Y+5, r18	; 0x05
		
		// If the user started the control system before entering high and low temp values --> return to home screen		
		if (temp_H == temp_L || temp_L > temp_H)
     488:	10 17       	cp	r17, r16
     48a:	38 f0       	brcs	.+14     	; 0x49a <mode_1+0x70>
		{
			LCD_clear_screen();
     48c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_clear_screen>
			LCD_sendString("Enter T values first");
     490:	88 ee       	ldi	r24, 0xE8	; 232
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LCD_sendString>
     498:	61 c0       	rjmp	.+194    	; 0x55c <mode_1+0x132>
		}
		// Else --> High and Low temp values are saved 
		else
		{
			// Normal state is when current temperature is between High and Low values
			if (t_current >= temp_L  && t_current <= temp_H)
     49a:	21 17       	cp	r18, r17
     49c:	60 f0       	brcs	.+24     	; 0x4b6 <mode_1+0x8c>
     49e:	02 17       	cp	r16, r18
     4a0:	50 f0       	brcs	.+20     	; 0x4b6 <mode_1+0x8c>
			{
				// Start Normal temperature mode
				Normal_temp_mode(&t_current ,&ADC_val , temp_H, temp_L);
     4a2:	21 2f       	mov	r18, r17
     4a4:	40 2f       	mov	r20, r16
     4a6:	be 01       	movw	r22, r28
     4a8:	6f 5f       	subi	r22, 0xFF	; 255
     4aa:	7f 4f       	sbci	r23, 0xFF	; 255
     4ac:	ce 01       	movw	r24, r28
     4ae:	05 96       	adiw	r24, 0x05	; 5
     4b0:	0e 94 93 00 	call	0x126	; 0x126 <Normal_temp_mode>
     4b4:	23 c0       	rjmp	.+70     	; 0x4fc <mode_1+0xd2>
			}
			// High state is when current temperature is above High value and below fire alarm value
			else if (t_current > temp_H && t_current < 70)
     4b6:	08 17       	cp	r16, r24
     4b8:	60 f4       	brcc	.+24     	; 0x4d2 <mode_1+0xa8>
     4ba:	86 34       	cpi	r24, 0x46	; 70
     4bc:	50 f4       	brcc	.+20     	; 0x4d2 <mode_1+0xa8>
			{
				// Start High temperature mode
				High_temp_mode(&t_current, &ADC_val , temp_H, temp_L);
     4be:	21 2f       	mov	r18, r17
     4c0:	40 2f       	mov	r20, r16
     4c2:	be 01       	movw	r22, r28
     4c4:	6f 5f       	subi	r22, 0xFF	; 255
     4c6:	7f 4f       	sbci	r23, 0xFF	; 255
     4c8:	ce 01       	movw	r24, r28
     4ca:	05 96       	adiw	r24, 0x05	; 5
     4cc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <High_temp_mode>
     4d0:	15 c0       	rjmp	.+42     	; 0x4fc <mode_1+0xd2>
			}
			// Fire alarm is when current temperature is above 70
			else if (t_current >= 70)
     4d2:	86 34       	cpi	r24, 0x46	; 70
     4d4:	40 f0       	brcs	.+16     	; 0x4e6 <mode_1+0xbc>
			{
				// Start fire alarm mode
				Fire_alarm_mode(&t_current, &ADC_val);
     4d6:	be 01       	movw	r22, r28
     4d8:	6f 5f       	subi	r22, 0xFF	; 255
     4da:	7f 4f       	sbci	r23, 0xFF	; 255
     4dc:	ce 01       	movw	r24, r28
     4de:	05 96       	adiw	r24, 0x05	; 5
     4e0:	0e 94 c0 01 	call	0x380	; 0x380 <Fire_alarm_mode>
     4e4:	0b c0       	rjmp	.+22     	; 0x4fc <mode_1+0xd2>
			}
			// Low state is when current temperature is below Low value
			else if (t_current < temp_L)
     4e6:	81 17       	cp	r24, r17
     4e8:	48 f4       	brcc	.+18     	; 0x4fc <mode_1+0xd2>
			{
				// Start low temperature mode
				Low_temp_mode(&t_current , &ADC_val, temp_H, temp_L);
     4ea:	21 2f       	mov	r18, r17
     4ec:	40 2f       	mov	r20, r16
     4ee:	be 01       	movw	r22, r28
     4f0:	6f 5f       	subi	r22, 0xFF	; 255
     4f2:	7f 4f       	sbci	r23, 0xFF	; 255
     4f4:	ce 01       	movw	r24, r28
     4f6:	05 96       	adiw	r24, 0x05	; 5
     4f8:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Low_temp_mode>
	uint8_t t_current = 0;
	
	LCD_clear_screen();
	// Control system will run while the stop flag value is 0
	// When the stop flag value is set to 1 it will stop
	while (stop_flag == 0)
     4fc:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
     500:	88 23       	and	r24, r24
     502:	09 f4       	brne	.+2      	; 0x506 <mode_1+0xdc>
     504:	a5 cf       	rjmp	.-182    	; 0x450 <mode_1+0x26>
			}
		}
		
	}
	// Stop flag is set to 1 ---> Force stop the control mode and return to home screen
	if (stop_flag == 1)
     506:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <__data_end>
     50a:	81 30       	cpi	r24, 0x01	; 1
     50c:	39 f5       	brne	.+78     	; 0x55c <mode_1+0x132>
	{
		// Send "Control mode stopped" message to the user through UART
		UART_sendString("Control mode stopped");
     50e:	8d ef       	ldi	r24, 0xFD	; 253
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 03 0a 	call	0x1406	; 0x1406 <UART_sendString>
		// Send "Enter" to display next message in new line
		UART_Transmit(13);
     516:	8d e0       	ldi	r24, 0x0D	; 13
     518:	0e 94 f6 09 	call	0x13ec	; 0x13ec <UART_Transmit>
		// Turn off all LEDs
		LED_OFF(LED_NORMAL);
     51c:	65 e0       	ldi	r22, 0x05	; 5
     51e:	82 e6       	ldi	r24, 0x62	; 98
     520:	0e 94 78 06 	call	0xcf0	; 0xcf0 <LED_OFF>
		LED_OFF(LED_LOW);
     524:	64 e0       	ldi	r22, 0x04	; 4
     526:	82 e6       	ldi	r24, 0x62	; 98
     528:	0e 94 78 06 	call	0xcf0	; 0xcf0 <LED_OFF>
		LED_OFF(LED_HIGH);
     52c:	66 e0       	ldi	r22, 0x06	; 6
     52e:	82 e6       	ldi	r24, 0x62	; 98
     530:	0e 94 78 06 	call	0xcf0	; 0xcf0 <LED_OFF>
		// Turn off BUZZER
		BUZZER_OFF(BUZZER_1);
     534:	67 e0       	ldi	r22, 0x07	; 7
     536:	82 e6       	ldi	r24, 0x62	; 98
     538:	0e 94 19 04 	call	0x832	; 0x832 <BUZZER_OFF>
		// Stop the fan
		timer0_dutyCycle(PWM_PHASE_CORRECT_MODE, 0);
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	0e 94 76 09 	call	0x12ec	; 0x12ec <timer0_dutyCycle>
		// Display home screen
		LCD_displayStringRowColumn(0,0, "1-Start Control");
     544:	42 e1       	ldi	r20, 0x12	; 18
     546:	51 e0       	ldi	r21, 0x01	; 1
     548:	60 e0       	ldi	r22, 0x00	; 0
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	0e 94 ef 05 	call	0xbde	; 0xbde <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0, "2-Enter T values");
     550:	42 e2       	ldi	r20, 0x22	; 34
     552:	51 e0       	ldi	r21, 0x01	; 1
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	81 e0       	ldi	r24, 0x01	; 1
     558:	0e 94 ef 05 	call	0xbde	; 0xbde <LCD_displayStringRowColumn>
	}
}
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	08 95       	ret

00000570 <mode_2>:

// Mode 2 for Entering the values of High and Low temperature 
// then save it on the EEPROM
// passes temp high and low values by reference to change it 
void mode_2(uint8_t *temp_H , uint8_t *temp_L)
{
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	ec 01       	movw	r28, r24
     57a:	8b 01       	movw	r16, r22
	// First set the high and low temp values to zero 
	*temp_H = 0;
     57c:	18 82       	st	Y, r1
	*temp_L = 0;
     57e:	fb 01       	movw	r30, r22
     580:	10 82       	st	Z, r1
	// Display T high on LCD to make the user enter it
	LCD_clear_screen();
     582:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_clear_screen>
	LCD_sendString("T High= ");
     586:	83 e3       	ldi	r24, 0x33	; 51
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LCD_sendString>
	// Taking the value from the user through the keypad till he press '='
	while(data != '=')
     58e:	23 c0       	rjmp	.+70     	; 0x5d6 <mode_2+0x66>
	{
		data = KPD_get_key();
     590:	0e 94 9c 04 	call	0x938	; 0x938 <KPD_get_key>
     594:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <data>
		if (data >= '0' && data <= '9')
     598:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <data>
     59c:	80 33       	cpi	r24, 0x30	; 48
     59e:	d8 f0       	brcs	.+54     	; 0x5d6 <mode_2+0x66>
     5a0:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <data>
     5a4:	8a 33       	cpi	r24, 0x3A	; 58
     5a6:	b8 f4       	brcc	.+46     	; 0x5d6 <mode_2+0x66>
		{
			LCD_sendCharacter(data);
     5a8:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <data>
     5ac:	0e 94 81 05 	call	0xb02	; 0xb02 <LCD_sendCharacter>
			*temp_H = *temp_H*10 + (data - '0');
     5b0:	88 81       	ld	r24, Y
     5b2:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <data>
     5b6:	88 0f       	add	r24, r24
     5b8:	28 2f       	mov	r18, r24
     5ba:	22 0f       	add	r18, r18
     5bc:	22 0f       	add	r18, r18
     5be:	82 0f       	add	r24, r18
     5c0:	89 0f       	add	r24, r25
     5c2:	80 53       	subi	r24, 0x30	; 48
     5c4:	88 83       	st	Y, r24
			data = KPD_get_key();
     5c6:	0e 94 9c 04 	call	0x938	; 0x938 <KPD_get_key>
     5ca:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <data>
			LCD_sendCharacter(data);
     5ce:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <data>
     5d2:	0e 94 81 05 	call	0xb02	; 0xb02 <LCD_sendCharacter>
	*temp_L = 0;
	// Display T high on LCD to make the user enter it
	LCD_clear_screen();
	LCD_sendString("T High= ");
	// Taking the value from the user through the keypad till he press '='
	while(data != '=')
     5d6:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <data>
     5da:	8d 33       	cpi	r24, 0x3D	; 61
     5dc:	c9 f6       	brne	.-78     	; 0x590 <mode_2+0x20>
			LCD_sendCharacter(data);
		}
	}
	// If user entered high temperature higher than or equal to fire alarm temperature
	// send wrong entry on LCD
	if(*temp_H >= 70)
     5de:	48 81       	ld	r20, Y
     5e0:	46 34       	cpi	r20, 0x46	; 70
     5e2:	38 f0       	brcs	.+14     	; 0x5f2 <mode_2+0x82>
	{
		LCD_clear_screen();
     5e4:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_clear_screen>
		LCD_sendString("Wrong entry");
     5e8:	8c e3       	ldi	r24, 0x3C	; 60
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LCD_sendString>
     5f0:	58 c0       	rjmp	.+176    	; 0x6a2 <mode_2+0x132>
	}
	else
	{
		// Save the entered high temperature value in EEPROM
		EEPROM_write(0x10 , EEPROM_ADRESS, *temp_H);
     5f2:	60 ea       	ldi	r22, 0xA0	; 160
     5f4:	80 e1       	ldi	r24, 0x10	; 16
     5f6:	0e 94 20 04 	call	0x840	; 0x840 <EEPROM_write>
		// Tell user to press 'x' on keypad to continue and go to low temperature value
		LCD_clear_screen();
     5fa:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_clear_screen>
		LCD_sendString("Press x to continue");
     5fe:	88 e4       	ldi	r24, 0x48	; 72
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LCD_sendString>
		// Wait till user press 'x'
		while(data != '*')
     606:	04 c0       	rjmp	.+8      	; 0x610 <mode_2+0xa0>
		{
			data = KPD_get_key();
     608:	0e 94 9c 04 	call	0x938	; 0x938 <KPD_get_key>
     60c:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <data>
		EEPROM_write(0x10 , EEPROM_ADRESS, *temp_H);
		// Tell user to press 'x' on keypad to continue and go to low temperature value
		LCD_clear_screen();
		LCD_sendString("Press x to continue");
		// Wait till user press 'x'
		while(data != '*')
     610:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <data>
     614:	8a 32       	cpi	r24, 0x2A	; 42
     616:	c1 f7       	brne	.-16     	; 0x608 <mode_2+0x98>
		{
			data = KPD_get_key();
		}
		// Display T low on LCD to make the user enter it 
		LCD_clear_screen();
     618:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_clear_screen>
		LCD_sendString("T Low= ");
     61c:	8c e5       	ldi	r24, 0x5C	; 92
     61e:	91 e0       	ldi	r25, 0x01	; 1
     620:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LCD_sendString>
		// Taking the value from the user through the keypad till he press '='
		while(data != '=')
     624:	24 c0       	rjmp	.+72     	; 0x66e <mode_2+0xfe>
		{
			data = KPD_get_key();
     626:	0e 94 9c 04 	call	0x938	; 0x938 <KPD_get_key>
     62a:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <data>
			if (data >= '0' && data <= '9')
     62e:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <data>
     632:	80 33       	cpi	r24, 0x30	; 48
     634:	e0 f0       	brcs	.+56     	; 0x66e <mode_2+0xfe>
     636:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <data>
     63a:	8a 33       	cpi	r24, 0x3A	; 58
     63c:	c0 f4       	brcc	.+48     	; 0x66e <mode_2+0xfe>
			{
				LCD_sendCharacter(data);
     63e:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <data>
     642:	0e 94 81 05 	call	0xb02	; 0xb02 <LCD_sendCharacter>
				*temp_L = *temp_L*10 + (data - '0');
     646:	f8 01       	movw	r30, r16
     648:	80 81       	ld	r24, Z
     64a:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <data>
     64e:	88 0f       	add	r24, r24
     650:	28 2f       	mov	r18, r24
     652:	22 0f       	add	r18, r18
     654:	22 0f       	add	r18, r18
     656:	82 0f       	add	r24, r18
     658:	89 0f       	add	r24, r25
     65a:	80 53       	subi	r24, 0x30	; 48
     65c:	80 83       	st	Z, r24
				data = KPD_get_key();
     65e:	0e 94 9c 04 	call	0x938	; 0x938 <KPD_get_key>
     662:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <data>
				LCD_sendCharacter(data);
     666:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <data>
     66a:	0e 94 81 05 	call	0xb02	; 0xb02 <LCD_sendCharacter>
		}
		// Display T low on LCD to make the user enter it 
		LCD_clear_screen();
		LCD_sendString("T Low= ");
		// Taking the value from the user through the keypad till he press '='
		while(data != '=')
     66e:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <data>
     672:	8d 33       	cpi	r24, 0x3D	; 61
     674:	c1 f6       	brne	.-80     	; 0x626 <mode_2+0xb6>
				LCD_sendCharacter(data);
			}
		}
		// If user entered low temperature higher than or equal to high temperature
		// send wrong entry on LCD
		if(*temp_L >= *temp_H || *temp_L < 0)
     676:	f8 01       	movw	r30, r16
     678:	40 81       	ld	r20, Z
     67a:	88 81       	ld	r24, Y
     67c:	48 17       	cp	r20, r24
     67e:	38 f0       	brcs	.+14     	; 0x68e <mode_2+0x11e>
		{
			LCD_clear_screen();
     680:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_clear_screen>
			LCD_sendString("Wrong entry");
     684:	8c e3       	ldi	r24, 0x3C	; 60
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LCD_sendString>
     68c:	0a c0       	rjmp	.+20     	; 0x6a2 <mode_2+0x132>
		}
		else
		{
			// Save the entered high temperature value in EEPROM
			EEPROM_write(0x20 , EEPROM_ADRESS, *temp_L);
     68e:	60 ea       	ldi	r22, 0xA0	; 160
     690:	80 e2       	ldi	r24, 0x20	; 32
     692:	0e 94 20 04 	call	0x840	; 0x840 <EEPROM_write>
			// Tell user that the values got saved on the EEPROM
			LCD_clear_screen();
     696:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_clear_screen>
			LCD_sendString("Values are saved.");
     69a:	84 e6       	ldi	r24, 0x64	; 100
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LCD_sendString>
		}
	}
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	08 95       	ret

000006ac <mode_3>:

// Mode 3 for displaying the values of T high and T low saved on the EEPROM
void mode_3(uint8_t t_high , uint8_t t_low)
{
     6ac:	cf 93       	push	r28
     6ae:	df 93       	push	r29
     6b0:	d8 2f       	mov	r29, r24
     6b2:	c6 2f       	mov	r28, r22
	LCD_clear_screen();
     6b4:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_clear_screen>
	LCD_displayStringRowColumn(0, 1, "T High= ");
     6b8:	43 e3       	ldi	r20, 0x33	; 51
     6ba:	51 e0       	ldi	r21, 0x01	; 1
     6bc:	61 e0       	ldi	r22, 0x01	; 1
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	0e 94 ef 05 	call	0xbde	; 0xbde <LCD_displayStringRowColumn>
	LCD_displayIntegerRowColumn(0, 9, t_high);
     6c4:	2d 2f       	mov	r18, r29
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	69 e0       	ldi	r22, 0x09	; 9
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <LCD_displayIntegerRowColumn>
	LCD_displayStringRowColumn(1, 1, "T Low= ");
     6d4:	4c e5       	ldi	r20, 0x5C	; 92
     6d6:	51 e0       	ldi	r21, 0x01	; 1
     6d8:	61 e0       	ldi	r22, 0x01	; 1
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	0e 94 ef 05 	call	0xbde	; 0xbde <LCD_displayStringRowColumn>
	LCD_displayIntegerRowColumn(1, 9, t_low);
     6e0:	2c 2f       	mov	r18, r28
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	40 e0       	ldi	r20, 0x00	; 0
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	69 e0       	ldi	r22, 0x09	; 9
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	0e 94 5f 06 	call	0xcbe	; 0xcbe <LCD_displayIntegerRowColumn>
}
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <app_start>:
	LCD_displayStringRowColumn(1,0, "Project");
	_delay_ms(300);
}
// void loop
void app_start()
{
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <app_start+0x6>
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
	// Reading high and low temperature saved in EEPROM
	uint8_t t_high = EEPROM_READ(0x10 , EEPROM_ADRESS);
     700:	60 ea       	ldi	r22, 0xA0	; 160
     702:	80 e1       	ldi	r24, 0x10	; 16
     704:	0e 94 3f 04 	call	0x87e	; 0x87e <EEPROM_READ>
     708:	89 83       	std	Y+1, r24	; 0x01
    uint8_t t_low = EEPROM_READ(0x20 , EEPROM_ADRESS);
     70a:	60 ea       	ldi	r22, 0xA0	; 160
     70c:	80 e2       	ldi	r24, 0x20	; 32
     70e:	0e 94 3f 04 	call	0x87e	; 0x87e <EEPROM_READ>
     712:	8a 83       	std	Y+2, r24	; 0x02
	// LCD displays 1st and 2nd mode to select between them
	LCD_clear_screen();
     714:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_clear_screen>
	LCD_displayStringRowColumn(0,0, "1-Start Control");
     718:	42 e1       	ldi	r20, 0x12	; 18
     71a:	51 e0       	ldi	r21, 0x01	; 1
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	0e 94 ef 05 	call	0xbde	; 0xbde <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0, "2-Enter T values");
     724:	42 e2       	ldi	r20, 0x22	; 34
     726:	51 e0       	ldi	r21, 0x01	; 1
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	0e 94 ef 05 	call	0xbde	; 0xbde <LCD_displayStringRowColumn>
	while (1)
	{
		// stop flag value is 0 --> you can start control system 
		stop_flag = 0;
     730:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <__data_end>
		// Getting the pressed key from Keypad
		data = KPD_get_key();
     734:	0e 94 9c 04 	call	0x938	; 0x938 <KPD_get_key>
     738:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <data>
		// If data = 0 ---> Key not pressed --> do nothing till its pressed
		if (data != 0)
     73c:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <data>
     740:	88 23       	and	r24, r24
     742:	b1 f3       	breq	.-20     	; 0x730 <app_start+0x3a>
		{
			// Depending on the pressed key --> do the case 
			switch (data)
     744:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <data>
     748:	81 33       	cpi	r24, 0x31	; 49
     74a:	21 f1       	breq	.+72     	; 0x794 <app_start+0x9e>
     74c:	28 f4       	brcc	.+10     	; 0x758 <app_start+0x62>
     74e:	8b 32       	cpi	r24, 0x2B	; 43
     750:	49 f0       	breq	.+18     	; 0x764 <app_start+0x6e>
     752:	8d 32       	cpi	r24, 0x2D	; 45
     754:	81 f0       	breq	.+32     	; 0x776 <app_start+0x80>
     756:	3f c0       	rjmp	.+126    	; 0x7d6 <app_start+0xe0>
     758:	83 33       	cpi	r24, 0x33	; 51
     75a:	49 f1       	breq	.+82     	; 0x7ae <app_start+0xb8>
     75c:	00 f1       	brcs	.+64     	; 0x79e <app_start+0xa8>
     75e:	83 36       	cpi	r24, 0x63	; 99
     760:	59 f1       	breq	.+86     	; 0x7b8 <app_start+0xc2>
     762:	39 c0       	rjmp	.+114    	; 0x7d6 <app_start+0xe0>
			{
				case '+':
					// Displays 2nd screen that shows the 3rd mode
					LCD_clear_screen();
     764:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_clear_screen>
					LCD_displayStringRowColumn(0,0, "3-Display T values");
     768:	46 e7       	ldi	r20, 0x76	; 118
     76a:	51 e0       	ldi	r21, 0x01	; 1
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	0e 94 ef 05 	call	0xbde	; 0xbde <LCD_displayStringRowColumn>
					break;
     774:	dd cf       	rjmp	.-70     	; 0x730 <app_start+0x3a>
				case '-':
					// Displays 1st screen that shows 1st and 2nd mode
					LCD_clear_screen();
     776:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_clear_screen>
					LCD_displayStringRowColumn(0,0, "1-Start Control");
     77a:	42 e1       	ldi	r20, 0x12	; 18
     77c:	51 e0       	ldi	r21, 0x01	; 1
     77e:	60 e0       	ldi	r22, 0x00	; 0
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	0e 94 ef 05 	call	0xbde	; 0xbde <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1,0, "2-Enter T values");
     786:	42 e2       	ldi	r20, 0x22	; 34
     788:	51 e0       	ldi	r21, 0x01	; 1
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	0e 94 ef 05 	call	0xbde	; 0xbde <LCD_displayStringRowColumn>
					break;
     792:	ce cf       	rjmp	.-100    	; 0x730 <app_start+0x3a>
				case '1':
					// Start mode 1 ---> start controlling the system
					mode_1(t_high , t_low);
     794:	6a 81       	ldd	r22, Y+2	; 0x02
     796:	89 81       	ldd	r24, Y+1	; 0x01
     798:	0e 94 15 02 	call	0x42a	; 0x42a <mode_1>
					break;
     79c:	c9 cf       	rjmp	.-110    	; 0x730 <app_start+0x3a>
				case '2':
					// Start mode 2 ---> Take High and Low temperature values from the user throught Keypad
					// Then save it on the EEPROM
					mode_2(&t_high , &t_low);
     79e:	be 01       	movw	r22, r28
     7a0:	6e 5f       	subi	r22, 0xFE	; 254
     7a2:	7f 4f       	sbci	r23, 0xFF	; 255
     7a4:	ce 01       	movw	r24, r28
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	0e 94 b8 02 	call	0x570	; 0x570 <mode_2>
					break;
     7ac:	c1 cf       	rjmp	.-126    	; 0x730 <app_start+0x3a>
				case '3':
					// Start mode 3 ---> Displayes High and Low temperature values saved on the EEPROM
					mode_3(t_high , t_low);
     7ae:	6a 81       	ldd	r22, Y+2	; 0x02
     7b0:	89 81       	ldd	r24, Y+1	; 0x01
     7b2:	0e 94 56 03 	call	0x6ac	; 0x6ac <mode_3>
					break;
     7b6:	bc cf       	rjmp	.-136    	; 0x730 <app_start+0x3a>
				case 'c':
					// Pressing 'on' stops the control system and returns you back to 1st screen
					LCD_clear_screen();
     7b8:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_clear_screen>
					LCD_displayStringRowColumn(0,0, "1-Start Control");
     7bc:	42 e1       	ldi	r20, 0x12	; 18
     7be:	51 e0       	ldi	r21, 0x01	; 1
     7c0:	60 e0       	ldi	r22, 0x00	; 0
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	0e 94 ef 05 	call	0xbde	; 0xbde <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1,0, "2-Enter T values");
     7c8:	42 e2       	ldi	r20, 0x22	; 34
     7ca:	51 e0       	ldi	r21, 0x01	; 1
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	0e 94 ef 05 	call	0xbde	; 0xbde <LCD_displayStringRowColumn>
					break;
     7d4:	ad cf       	rjmp	.-166    	; 0x730 <app_start+0x3a>
				default:
					// Pressing anything other than previous cases returns you to 1st screen
					LCD_clear_screen();
     7d6:	0e 94 da 05 	call	0xbb4	; 0xbb4 <LCD_clear_screen>
					LCD_displayStringRowColumn(0,0, "1-Start Control");
     7da:	42 e1       	ldi	r20, 0x12	; 18
     7dc:	51 e0       	ldi	r21, 0x01	; 1
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	0e 94 ef 05 	call	0xbde	; 0xbde <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1,0, "2-Enter T values");
     7e6:	42 e2       	ldi	r20, 0x22	; 34
     7e8:	51 e0       	ldi	r21, 0x01	; 1
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	0e 94 ef 05 	call	0xbde	; 0xbde <LCD_displayStringRowColumn>
					break;
     7f2:	9e cf       	rjmp	.-196    	; 0x730 <app_start+0x3a>

000007f4 <__vector_1>:
}


// External interrupt 0 activates on falling edge
ISR(EXT_INT_0)
{
     7f4:	1f 92       	push	r1
     7f6:	0f 92       	push	r0
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	0f 92       	push	r0
     7fc:	11 24       	eor	r1, r1
     7fe:	8f 93       	push	r24
	// It sets the stop flag to 1 --->> which stops mode 1 and returns to home screen
	stop_flag = 1;
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <__data_end>
     806:	8f 91       	pop	r24
     808:	0f 90       	pop	r0
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	0f 90       	pop	r0
     80e:	1f 90       	pop	r1
     810:	18 95       	reti

00000812 <button_init>:
	DIO_init_pin(btn_port,btn_pin,INPUT);
}

void button_read(uint8_t btn_port ,uint8_t btn_pin, uint8_t *btn_state)
{
	DIO_read_pin(btn_port,btn_pin,btn_state);
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_init_pin>
     818:	08 95       	ret

0000081a <button_set_pullUp>:
}

//set the button as internal pull up
void button_set_pullUp(uint8_t btn_port ,uint8_t btn_pin)
{
	DIO_write_pin(btn_port, btn_pin, HIGH);
     81a:	41 e0       	ldi	r20, 0x01	; 1
     81c:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
     820:	08 95       	ret

00000822 <BUZZER_init>:


//initialize the BUZZER
void BUZZER_init(uint8_t buzzerPort , uint8_t buzzerPin)
{
	DIO_init_pin(buzzerPort,buzzerPin,OUTPUT);
     822:	41 e0       	ldi	r20, 0x01	; 1
     824:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_init_pin>
     828:	08 95       	ret

0000082a <BUZZER_ON>:
}

//TURN ON THE BUZZER
void BUZZER_ON(uint8_t buzzerPort , uint8_t buzzerPin)
{
	DIO_write_pin(buzzerPort,buzzerPin,HIGH);
     82a:	41 e0       	ldi	r20, 0x01	; 1
     82c:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
     830:	08 95       	ret

00000832 <BUZZER_OFF>:
}

//TURN OFF THE BUZZER
void BUZZER_OFF(uint8_t buzzerPort , uint8_t buzzerPin)
{
	DIO_write_pin(buzzerPort,buzzerPin,LOW);
     832:	40 e0       	ldi	r20, 0x00	; 0
     834:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
     838:	08 95       	ret

0000083a <EEPROM_INIT>:
#include "EEPROM_MT.h"


void EEPROM_INIT(void)
{
	i2c_init();
     83a:	0e 94 cb 08 	call	0x1196	; 0x1196 <i2c_init>
     83e:	08 95       	ret

00000840 <EEPROM_write>:
}

void EEPROM_write (uint8_t memory_location, uint8_t slave_address , uint8_t data)
{
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
     846:	d8 2f       	mov	r29, r24
     848:	16 2f       	mov	r17, r22
     84a:	c4 2f       	mov	r28, r20
	i2c_init();
     84c:	0e 94 cb 08 	call	0x1196	; 0x1196 <i2c_init>
	i2c_start();
     850:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <i2c_start>
	i2c_write(slave_address); //slave address 0xa0
     854:	81 2f       	mov	r24, r17
     856:	0e 94 da 08 	call	0x11b4	; 0x11b4 <i2c_write>
	i2c_write(memory_location); //memory location
     85a:	8d 2f       	mov	r24, r29
     85c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <i2c_write>
	// This step can be repeated
	i2c_write(data);   //data
     860:	8c 2f       	mov	r24, r28
     862:	0e 94 da 08 	call	0x11b4	; 0x11b4 <i2c_write>
	i2c_stop();
     866:	0e 94 d7 08 	call	0x11ae	; 0x11ae <i2c_stop>
     86a:	8f e2       	ldi	r24, 0x2F	; 47
     86c:	95 e7       	ldi	r25, 0x75	; 117
     86e:	01 97       	sbiw	r24, 0x01	; 1
     870:	f1 f7       	brne	.-4      	; 0x86e <__stack+0xf>
     872:	00 c0       	rjmp	.+0      	; 0x874 <__stack+0x15>
     874:	00 00       	nop
	_delay_ms(15);
}
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	08 95       	ret

0000087e <EEPROM_READ>:



uint8_t EEPROM_READ(uint8_t memory_location, uint8_t slave_address)
{
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	d8 2f       	mov	r29, r24
     884:	c6 2f       	mov	r28, r22
	uint8_t data=0;


	i2c_start();                      /* Send Start Bit 						 */
     886:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <i2c_start>
	i2c_write(slave_address);         /* Send Slave address with Operation Write */
     88a:	8c 2f       	mov	r24, r28
     88c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <i2c_write>
	i2c_write(memory_location);       /* Send Memory Location Address 			 */
     890:	8d 2f       	mov	r24, r29
     892:	0e 94 da 08 	call	0x11b4	; 0x11b4 <i2c_write>

	i2c_start();                      /* Send Restart Bit 						 */
     896:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <i2c_start>
	i2c_write(slave_address | 1);     /* Send Slave address with Operation read  */
     89a:	8c 2f       	mov	r24, r28
     89c:	81 60       	ori	r24, 0x01	; 1
     89e:	0e 94 da 08 	call	0x11b4	; 0x11b4 <i2c_write>
	data = i2c_read(1);
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <i2c_read>
     8a8:	c8 2f       	mov	r28, r24
	
	
	i2c_stop();
     8aa:	0e 94 d7 08 	call	0x11ae	; 0x11ae <i2c_stop>

	return data;
}
     8ae:	8c 2f       	mov	r24, r28
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	08 95       	ret

000008b6 <KPD_init>:
static const uint8_t cols[NO_COLS] = {COL_1, COL_2, COL_3, COL_4};
#endif

// Initialization function
void KPD_init()
{
     8b6:	cf 93       	push	r28
	// Set all rows as output
	DIO_init_pin(KEYPAD_ROW_PORT, ROW_1, OUTPUT);
     8b8:	41 e0       	ldi	r20, 0x01	; 1
     8ba:	64 e0       	ldi	r22, 0x04	; 4
     8bc:	83 e6       	ldi	r24, 0x63	; 99
     8be:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_init_pin>
	DIO_init_pin(KEYPAD_ROW_PORT, ROW_2, OUTPUT);
     8c2:	41 e0       	ldi	r20, 0x01	; 1
     8c4:	65 e0       	ldi	r22, 0x05	; 5
     8c6:	83 e6       	ldi	r24, 0x63	; 99
     8c8:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_init_pin>
	DIO_init_pin(KEYPAD_ROW_PORT, ROW_3, OUTPUT);
     8cc:	41 e0       	ldi	r20, 0x01	; 1
     8ce:	66 e0       	ldi	r22, 0x06	; 6
     8d0:	83 e6       	ldi	r24, 0x63	; 99
     8d2:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_init_pin>
	DIO_init_pin(KEYPAD_ROW_PORT, ROW_4, OUTPUT);
     8d6:	41 e0       	ldi	r20, 0x01	; 1
     8d8:	67 e0       	ldi	r22, 0x07	; 7
     8da:	83 e6       	ldi	r24, 0x63	; 99
     8dc:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_init_pin>

	// Set all columns as input
	for (uint8_t j = 0; j < NO_COLS ; j++)
     8e0:	c0 e0       	ldi	r28, 0x00	; 0
     8e2:	0a c0       	rjmp	.+20     	; 0x8f8 <KPD_init+0x42>
	{
		DIO_init_pin(KEYPAD_COLUMN_PORT,cols[j], INPUT);
     8e4:	ec 2f       	mov	r30, r28
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	e7 57       	subi	r30, 0x77	; 119
     8ea:	fe 4f       	sbci	r31, 0xFE	; 254
     8ec:	40 e0       	ldi	r20, 0x00	; 0
     8ee:	60 81       	ld	r22, Z
     8f0:	84 e6       	ldi	r24, 0x64	; 100
     8f2:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_init_pin>
	DIO_init_pin(KEYPAD_ROW_PORT, ROW_2, OUTPUT);
	DIO_init_pin(KEYPAD_ROW_PORT, ROW_3, OUTPUT);
	DIO_init_pin(KEYPAD_ROW_PORT, ROW_4, OUTPUT);

	// Set all columns as input
	for (uint8_t j = 0; j < NO_COLS ; j++)
     8f6:	cf 5f       	subi	r28, 0xFF	; 255
     8f8:	c4 30       	cpi	r28, 0x04	; 4
     8fa:	a0 f3       	brcs	.-24     	; 0x8e4 <KPD_init+0x2e>
     8fc:	c0 e0       	ldi	r28, 0x00	; 0
     8fe:	0a c0       	rjmp	.+20     	; 0x914 <KPD_init+0x5e>
		DIO_init_pin(KEYPAD_COLUMN_PORT,cols[j], INPUT);
	}
	// Set all inputs as internal pull up and all outputs as high
	for ( uint8_t i = 0; i < NO_ROWS ; i++)
	{
		DIO_write_pin(KEYPAD_ROW_PORT,rows[i], HIGH);
     900:	ec 2f       	mov	r30, r28
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	e3 57       	subi	r30, 0x73	; 115
     906:	fe 4f       	sbci	r31, 0xFE	; 254
     908:	41 e0       	ldi	r20, 0x01	; 1
     90a:	60 81       	ld	r22, Z
     90c:	83 e6       	ldi	r24, 0x63	; 99
     90e:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
	for (uint8_t j = 0; j < NO_COLS ; j++)
	{
		DIO_init_pin(KEYPAD_COLUMN_PORT,cols[j], INPUT);
	}
	// Set all inputs as internal pull up and all outputs as high
	for ( uint8_t i = 0; i < NO_ROWS ; i++)
     912:	cf 5f       	subi	r28, 0xFF	; 255
     914:	c4 30       	cpi	r28, 0x04	; 4
     916:	a0 f3       	brcs	.-24     	; 0x900 <KPD_init+0x4a>
     918:	c0 e0       	ldi	r28, 0x00	; 0
     91a:	0a c0       	rjmp	.+20     	; 0x930 <KPD_init+0x7a>
	{
		DIO_write_pin(KEYPAD_ROW_PORT,rows[i], HIGH);
	}
	for (uint8_t k = 0; k < NO_COLS ; k++)
	{
		DIO_write_pin(KEYPAD_COLUMN_PORT,cols[k], HIGH);
     91c:	ec 2f       	mov	r30, r28
     91e:	f0 e0       	ldi	r31, 0x00	; 0
     920:	e7 57       	subi	r30, 0x77	; 119
     922:	fe 4f       	sbci	r31, 0xFE	; 254
     924:	41 e0       	ldi	r20, 0x01	; 1
     926:	60 81       	ld	r22, Z
     928:	84 e6       	ldi	r24, 0x64	; 100
     92a:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
	// Set all inputs as internal pull up and all outputs as high
	for ( uint8_t i = 0; i < NO_ROWS ; i++)
	{
		DIO_write_pin(KEYPAD_ROW_PORT,rows[i], HIGH);
	}
	for (uint8_t k = 0; k < NO_COLS ; k++)
     92e:	cf 5f       	subi	r28, 0xFF	; 255
     930:	c4 30       	cpi	r28, 0x04	; 4
     932:	a0 f3       	brcs	.-24     	; 0x91c <KPD_init+0x66>
	{
		DIO_write_pin(KEYPAD_COLUMN_PORT,cols[k], HIGH);
	}
}
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <KPD_get_key>:

// Function to get the pressed key
uint8_t KPD_get_key()
{
     938:	af 92       	push	r10
     93a:	bf 92       	push	r11
     93c:	cf 92       	push	r12
     93e:	df 92       	push	r13
     940:	ef 92       	push	r14
     942:	ff 92       	push	r15
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	1f 92       	push	r1
     94e:	cd b7       	in	r28, 0x3d	; 61
     950:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t key_status = HIGH;
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	89 83       	std	Y+1, r24	; 0x01
	for (uint8_t i = 0; i < NO_ROWS ; i++)
     956:	b1 2c       	mov	r11, r1
     958:	43 c0       	rjmp	.+134    	; 0x9e0 <KPD_get_key+0xa8>
	{
		DIO_write_pin(KEYPAD_ROW_PORT, rows[i], LOW);
     95a:	cb 2c       	mov	r12, r11
     95c:	d1 2c       	mov	r13, r1
     95e:	f6 01       	movw	r30, r12
     960:	e3 57       	subi	r30, 0x73	; 115
     962:	fe 4f       	sbci	r31, 0xFE	; 254
     964:	a0 80       	ld	r10, Z
     966:	40 e0       	ldi	r20, 0x00	; 0
     968:	6a 2d       	mov	r22, r10
     96a:	83 e6       	ldi	r24, 0x63	; 99
     96c:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
		for (uint8_t j = 0; j < NO_COLS ; j++)
     970:	10 e0       	ldi	r17, 0x00	; 0
     972:	2e c0       	rjmp	.+92     	; 0x9d0 <KPD_get_key+0x98>
		{
			// Enable the current row, low
			DIO_read_pin(KEYPAD_COLUMN_PORT, cols[j], &key_status);
     974:	e1 2e       	mov	r14, r17
     976:	f1 2c       	mov	r15, r1
     978:	f7 01       	movw	r30, r14
     97a:	e7 57       	subi	r30, 0x77	; 119
     97c:	fe 4f       	sbci	r31, 0xFE	; 254
     97e:	00 81       	ld	r16, Z
     980:	ae 01       	movw	r20, r28
     982:	4f 5f       	subi	r20, 0xFF	; 255
     984:	5f 4f       	sbci	r21, 0xFF	; 255
     986:	60 2f       	mov	r22, r16
     988:	84 e6       	ldi	r24, 0x64	; 100
     98a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_read_pin>
			if (key_status == LOW)
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	81 11       	cpse	r24, r1
     992:	1d c0       	rjmp	.+58     	; 0x9ce <KPD_get_key+0x96>
     994:	8f e3       	ldi	r24, 0x3F	; 63
     996:	9c e9       	ldi	r25, 0x9C	; 156
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	f1 f7       	brne	.-4      	; 0x998 <KPD_get_key+0x60>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <KPD_get_key+0x66>
     99e:	00 00       	nop
     9a0:	07 c0       	rjmp	.+14     	; 0x9b0 <KPD_get_key+0x78>
				// De bouncing
				_delay_ms(20);
				// Wait until the key is not pressed
				while (key_status == LOW)
				{
					DIO_read_pin(KEYPAD_COLUMN_PORT, cols[j], &key_status);
     9a2:	ae 01       	movw	r20, r28
     9a4:	4f 5f       	subi	r20, 0xFF	; 255
     9a6:	5f 4f       	sbci	r21, 0xFF	; 255
     9a8:	60 2f       	mov	r22, r16
     9aa:	84 e6       	ldi	r24, 0x64	; 100
     9ac:	0e 94 cf 07 	call	0xf9e	; 0xf9e <DIO_read_pin>
			if (key_status == LOW)
			{
				// De bouncing
				_delay_ms(20);
				// Wait until the key is not pressed
				while (key_status == LOW)
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	88 23       	and	r24, r24
     9b4:	b1 f3       	breq	.-20     	; 0x9a2 <KPD_get_key+0x6a>
				{
					DIO_read_pin(KEYPAD_COLUMN_PORT, cols[j], &key_status);
				}
				return keypad_keys[i][j];
     9b6:	c6 01       	movw	r24, r12
     9b8:	88 0f       	add	r24, r24
     9ba:	99 1f       	adc	r25, r25
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	8f 56       	subi	r24, 0x6F	; 111
     9c2:	9e 4f       	sbci	r25, 0xFE	; 254
     9c4:	fc 01       	movw	r30, r24
     9c6:	ee 0d       	add	r30, r14
     9c8:	ff 1d       	adc	r31, r15
     9ca:	80 81       	ld	r24, Z
     9cc:	0e c0       	rjmp	.+28     	; 0x9ea <KPD_get_key+0xb2>
{
	volatile uint8_t key_status = HIGH;
	for (uint8_t i = 0; i < NO_ROWS ; i++)
	{
		DIO_write_pin(KEYPAD_ROW_PORT, rows[i], LOW);
		for (uint8_t j = 0; j < NO_COLS ; j++)
     9ce:	1f 5f       	subi	r17, 0xFF	; 255
     9d0:	14 30       	cpi	r17, 0x04	; 4
     9d2:	80 f2       	brcs	.-96     	; 0x974 <KPD_get_key+0x3c>
			{
				//do nothing
			}
		}
		// Disable the current row, high
		DIO_write_pin(KEYPAD_ROW_PORT, rows[i], HIGH);
     9d4:	41 e0       	ldi	r20, 0x01	; 1
     9d6:	6a 2d       	mov	r22, r10
     9d8:	83 e6       	ldi	r24, 0x63	; 99
     9da:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>

// Function to get the pressed key
uint8_t KPD_get_key()
{
	volatile uint8_t key_status = HIGH;
	for (uint8_t i = 0; i < NO_ROWS ; i++)
     9de:	b3 94       	inc	r11
     9e0:	93 e0       	ldi	r25, 0x03	; 3
     9e2:	9b 15       	cp	r25, r11
     9e4:	08 f0       	brcs	.+2      	; 0x9e8 <KPD_get_key+0xb0>
     9e6:	b9 cf       	rjmp	.-142    	; 0x95a <KPD_get_key+0x22>
			}
		}
		// Disable the current row, high
		DIO_write_pin(KEYPAD_ROW_PORT, rows[i], HIGH);
	}
	return 0;
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	0f 90       	pop	r0
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	ff 90       	pop	r15
     9f6:	ef 90       	pop	r14
     9f8:	df 90       	pop	r13
     9fa:	cf 90       	pop	r12
     9fc:	bf 90       	pop	r11
     9fe:	af 90       	pop	r10
     a00:	08 95       	ret

00000a02 <LCD_sendCommand>:
	LCD_sendCommand(SHIFT_CURSOR_RIGHT);
}

//function to send a command to the LCD
void LCD_sendCommand(uint8_t command)
{
     a02:	cf 93       	push	r28
     a04:	c8 2f       	mov	r28, r24
	// Set RS 0 ---> Send a command
	DIO_write_pin(RS, LOW);
     a06:	40 e0       	ldi	r20, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	82 e6       	ldi	r24, 0x62	; 98
     a0c:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
	// Write RW ---> 0
	DIO_write_pin(RW, LOW);
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	61 e0       	ldi	r22, 0x01	; 1
     a14:	82 e6       	ldi	r24, 0x62	; 98
     a16:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
		_delay_ms(1);
	#elif (LCD_DATA_BITS_MODE == 4)
		// In 4-bit mode 
		// Send half the command (upper half)
		#ifdef UPPER_PORT_PINS
		DIO_write_upper_pins_port(LCD_DATA_PORT, (command & 0xf0));
     a1a:	6c 2f       	mov	r22, r28
     a1c:	60 7f       	andi	r22, 0xF0	; 240
     a1e:	81 e6       	ldi	r24, 0x61	; 97
     a20:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_write_upper_pins_port>
		#else
		DIO_write_lower_pins_port(LCD_DATA_PORT, ((command & 0xf0)>>4));
		#endif
	// then enable
	DIO_write_pin(E, HIGH);
     a24:	41 e0       	ldi	r20, 0x01	; 1
     a26:	62 e0       	ldi	r22, 0x02	; 2
     a28:	82 e6       	ldi	r24, 0x62	; 98
     a2a:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
     a2e:	8f ec       	ldi	r24, 0xCF	; 207
     a30:	97 e0       	ldi	r25, 0x07	; 7
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	f1 f7       	brne	.-4      	; 0xa32 <LCD_sendCommand+0x30>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <LCD_sendCommand+0x36>
     a38:	00 00       	nop
	_delay_ms(1);
	DIO_write_pin(E, LOW);
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	62 e0       	ldi	r22, 0x02	; 2
     a3e:	82 e6       	ldi	r24, 0x62	; 98
     a40:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
     a44:	8f ec       	ldi	r24, 0xCF	; 207
     a46:	97 e0       	ldi	r25, 0x07	; 7
     a48:	01 97       	sbiw	r24, 0x01	; 1
     a4a:	f1 f7       	brne	.-4      	; 0xa48 <LCD_sendCommand+0x46>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <LCD_sendCommand+0x4c>
     a4e:	00 00       	nop
	_delay_ms(1);
	// Send the lower half 
		#ifdef UPPER_PORT_PINS
		DIO_write_upper_pins_port(LCD_DATA_PORT, ((command & 0x0f)<<4));
     a50:	90 e1       	ldi	r25, 0x10	; 16
     a52:	c9 9f       	mul	r28, r25
     a54:	b0 01       	movw	r22, r0
     a56:	11 24       	eor	r1, r1
     a58:	81 e6       	ldi	r24, 0x61	; 97
     a5a:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_write_upper_pins_port>
		#else
		DIO_write_lower_pins_port(LCD_DATA_PORT, (command & 0x0f));
		#endif
	// enable
	DIO_write_pin(E, HIGH);
     a5e:	41 e0       	ldi	r20, 0x01	; 1
     a60:	62 e0       	ldi	r22, 0x02	; 2
     a62:	82 e6       	ldi	r24, 0x62	; 98
     a64:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
     a68:	8f ec       	ldi	r24, 0xCF	; 207
     a6a:	97 e0       	ldi	r25, 0x07	; 7
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	f1 f7       	brne	.-4      	; 0xa6c <LCD_sendCommand+0x6a>
     a70:	00 c0       	rjmp	.+0      	; 0xa72 <LCD_sendCommand+0x70>
     a72:	00 00       	nop
	_delay_ms(1);
	DIO_write_pin(E, LOW);
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	62 e0       	ldi	r22, 0x02	; 2
     a78:	82 e6       	ldi	r24, 0x62	; 98
     a7a:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
     a7e:	8f ec       	ldi	r24, 0xCF	; 207
     a80:	97 e0       	ldi	r25, 0x07	; 7
     a82:	01 97       	sbiw	r24, 0x01	; 1
     a84:	f1 f7       	brne	.-4      	; 0xa82 <LCD_sendCommand+0x80>
     a86:	00 c0       	rjmp	.+0      	; 0xa88 <LCD_sendCommand+0x86>
     a88:	00 00       	nop
	_delay_ms(1);
	#endif
}
     a8a:	cf 91       	pop	r28
     a8c:	08 95       	ret

00000a8e <LCD_init>:

// LCD initialization function
void LCD_init()
{
	// Initialize the control pins as outputs
	DIO_init_pin(RS, OUTPUT);
     a8e:	41 e0       	ldi	r20, 0x01	; 1
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	82 e6       	ldi	r24, 0x62	; 98
     a94:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_init_pin>
	DIO_init_pin(RW, OUTPUT);
     a98:	41 e0       	ldi	r20, 0x01	; 1
     a9a:	61 e0       	ldi	r22, 0x01	; 1
     a9c:	82 e6       	ldi	r24, 0x62	; 98
     a9e:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_init_pin>
	DIO_init_pin(E, OUTPUT);
     aa2:	41 e0       	ldi	r20, 0x01	; 1
     aa4:	62 e0       	ldi	r22, 0x02	; 2
     aa6:	82 e6       	ldi	r24, 0x62	; 98
     aa8:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_init_pin>
	#elif (LCD_DATA_BITS_MODE == 4)
	// 4 bit mode initialize the data as output
		#ifdef UPPER_PORT_PINS
		// Upper pins ----> pin 4 to 7
		//DIO_init_port(LCD_DATA_PORT, 0xff);
		DIO_init_upper_pins_port(LCD_DATA_PORT, OUTPUT);
     aac:	61 e0       	ldi	r22, 0x01	; 1
     aae:	81 e6       	ldi	r24, 0x61	; 97
     ab0:	0e 94 39 08 	call	0x1072	; 0x1072 <DIO_init_upper_pins_port>
     ab4:	2f eb       	ldi	r18, 0xBF	; 191
     ab6:	8a ed       	ldi	r24, 0xDA	; 218
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	21 50       	subi	r18, 0x01	; 1
     abc:	80 40       	sbci	r24, 0x00	; 0
     abe:	90 40       	sbci	r25, 0x00	; 0
     ac0:	e1 f7       	brne	.-8      	; 0xaba <LCD_init+0x2c>
     ac2:	00 c0       	rjmp	.+0      	; 0xac4 <LCD_init+0x36>
     ac4:	00 00       	nop
		#endif
	// Wait more than 30 ms
	_delay_ms(35);
	// Function set
	// Initialize 4 bit mode
	LCD_sendCommand(FOUR_BITS_DATA_MODE);
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	0e 94 01 05 	call	0xa02	; 0xa02 <LCD_sendCommand>
	// Set two lines 4 bit mode
	LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
     acc:	88 e2       	ldi	r24, 0x28	; 40
     ace:	0e 94 01 05 	call	0xa02	; 0xa02 <LCD_sendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ad2:	2a e6       	ldi	r18, 0x6A	; 106
     ad4:	2a 95       	dec	r18
     ad6:	f1 f7       	brne	.-4      	; 0xad4 <LCD_init+0x46>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <LCD_init+0x4c>
	_delay_us(40);
	#endif
	
	// Display ON --- Cursor ON
	LCD_sendCommand(CURSOR_ON);
     ada:	8e e0       	ldi	r24, 0x0E	; 14
     adc:	0e 94 01 05 	call	0xa02	; 0xa02 <LCD_sendCommand>
     ae0:	8a e6       	ldi	r24, 0x6A	; 106
     ae2:	8a 95       	dec	r24
     ae4:	f1 f7       	brne	.-4      	; 0xae2 <LCD_init+0x54>
     ae6:	00 c0       	rjmp	.+0      	; 0xae8 <LCD_init+0x5a>
	_delay_us(40);
	// Clear the display 
	LCD_sendCommand(CLEAR_COMMAND);
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	0e 94 01 05 	call	0xa02	; 0xa02 <LCD_sendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aee:	8f e9       	ldi	r24, 0x9F	; 159
     af0:	9f e0       	ldi	r25, 0x0F	; 15
     af2:	01 97       	sbiw	r24, 0x01	; 1
     af4:	f1 f7       	brne	.-4      	; 0xaf2 <LCD_init+0x64>
     af6:	00 c0       	rjmp	.+0      	; 0xaf8 <LCD_init+0x6a>
     af8:	00 00       	nop
	_delay_ms(2);
	LCD_sendCommand(SHIFT_CURSOR_RIGHT);
     afa:	86 e0       	ldi	r24, 0x06	; 6
     afc:	0e 94 01 05 	call	0xa02	; 0xa02 <LCD_sendCommand>
     b00:	08 95       	ret

00000b02 <LCD_sendCharacter>:
	#endif
}

//function to send data or a character to the LCD
void LCD_sendCharacter(sint8_t data )
{
     b02:	cf 93       	push	r28
     b04:	c8 2f       	mov	r28, r24
	// Set RS 1 ---> Send data
	DIO_write_pin(RS, HIGH);
     b06:	41 e0       	ldi	r20, 0x01	; 1
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	82 e6       	ldi	r24, 0x62	; 98
     b0c:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
	// Write RW ---> 0
	DIO_write_pin(RW, LOW);
     b10:	40 e0       	ldi	r20, 0x00	; 0
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	82 e6       	ldi	r24, 0x62	; 98
     b16:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
		_delay_ms(1);
	#elif (LCD_DATA_BITS_MODE == 4)
		// In 4-bit mode
		// Send half the data (upper half)
		#ifdef UPPER_PORT_PINS
		DIO_write_upper_pins_port(LCD_DATA_PORT, (data & 0xf0));
     b1a:	6c 2f       	mov	r22, r28
     b1c:	60 7f       	andi	r22, 0xF0	; 240
     b1e:	81 e6       	ldi	r24, 0x61	; 97
     b20:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_write_upper_pins_port>
		#else
		DIO_write_lower_pins_port(LCD_DATA_PORT, ((data & 0xf0)>>4));
		#endif
	// then enable
	DIO_write_pin(E, HIGH);
     b24:	41 e0       	ldi	r20, 0x01	; 1
     b26:	62 e0       	ldi	r22, 0x02	; 2
     b28:	82 e6       	ldi	r24, 0x62	; 98
     b2a:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
     b2e:	8f ec       	ldi	r24, 0xCF	; 207
     b30:	97 e0       	ldi	r25, 0x07	; 7
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	f1 f7       	brne	.-4      	; 0xb32 <LCD_sendCharacter+0x30>
     b36:	00 c0       	rjmp	.+0      	; 0xb38 <LCD_sendCharacter+0x36>
     b38:	00 00       	nop
	_delay_ms(1);
	DIO_write_pin(E, LOW);
     b3a:	40 e0       	ldi	r20, 0x00	; 0
     b3c:	62 e0       	ldi	r22, 0x02	; 2
     b3e:	82 e6       	ldi	r24, 0x62	; 98
     b40:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
     b44:	8f ec       	ldi	r24, 0xCF	; 207
     b46:	97 e0       	ldi	r25, 0x07	; 7
     b48:	01 97       	sbiw	r24, 0x01	; 1
     b4a:	f1 f7       	brne	.-4      	; 0xb48 <LCD_sendCharacter+0x46>
     b4c:	00 c0       	rjmp	.+0      	; 0xb4e <LCD_sendCharacter+0x4c>
     b4e:	00 00       	nop
	_delay_ms(1);
	// Send the lower half
		#ifdef UPPER_PORT_PINS
		DIO_write_upper_pins_port(LCD_DATA_PORT, ((data & 0x0f)<<4));
     b50:	90 e1       	ldi	r25, 0x10	; 16
     b52:	c9 9f       	mul	r28, r25
     b54:	b0 01       	movw	r22, r0
     b56:	11 24       	eor	r1, r1
     b58:	81 e6       	ldi	r24, 0x61	; 97
     b5a:	0e 94 8a 08 	call	0x1114	; 0x1114 <DIO_write_upper_pins_port>
		#else
		DIO_write_lower_pins_port(LCD_DATA_PORT, (data & 0x0f));
		#endif
	// enable
	DIO_write_pin(E, HIGH);
     b5e:	41 e0       	ldi	r20, 0x01	; 1
     b60:	62 e0       	ldi	r22, 0x02	; 2
     b62:	82 e6       	ldi	r24, 0x62	; 98
     b64:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
     b68:	8f ec       	ldi	r24, 0xCF	; 207
     b6a:	97 e0       	ldi	r25, 0x07	; 7
     b6c:	01 97       	sbiw	r24, 0x01	; 1
     b6e:	f1 f7       	brne	.-4      	; 0xb6c <LCD_sendCharacter+0x6a>
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <LCD_sendCharacter+0x70>
     b72:	00 00       	nop
	_delay_ms(1);
	DIO_write_pin(E, LOW);
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	62 e0       	ldi	r22, 0x02	; 2
     b78:	82 e6       	ldi	r24, 0x62	; 98
     b7a:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
     b7e:	8f ec       	ldi	r24, 0xCF	; 207
     b80:	97 e0       	ldi	r25, 0x07	; 7
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	f1 f7       	brne	.-4      	; 0xb82 <LCD_sendCharacter+0x80>
     b86:	00 c0       	rjmp	.+0      	; 0xb88 <LCD_sendCharacter+0x86>
     b88:	00 00       	nop
	_delay_ms(1);
	#endif
}
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <LCD_sendString>:

//function to send a string to the LCD
void LCD_sendString(const sint8_t* str)
{
     b8e:	0f 93       	push	r16
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; str[i] != 0; i++)
     b96:	c0 e0       	ldi	r28, 0x00	; 0
     b98:	03 c0       	rjmp	.+6      	; 0xba0 <LCD_sendString+0x12>
	{
		LCD_sendCharacter(str[i]);
     b9a:	0e 94 81 05 	call	0xb02	; 0xb02 <LCD_sendCharacter>
}

//function to send a string to the LCD
void LCD_sendString(const sint8_t* str)
{
	for (uint8_t i = 0; str[i] != 0; i++)
     b9e:	cf 5f       	subi	r28, 0xFF	; 255
     ba0:	f8 01       	movw	r30, r16
     ba2:	ec 0f       	add	r30, r28
     ba4:	f1 1d       	adc	r31, r1
     ba6:	80 81       	ld	r24, Z
     ba8:	81 11       	cpse	r24, r1
     baa:	f7 cf       	rjmp	.-18     	; 0xb9a <LCD_sendString+0xc>
	{
		LCD_sendCharacter(str[i]);
	}
}
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	08 95       	ret

00000bb4 <LCD_clear_screen>:

//function to clear the screen
void LCD_clear_screen()
{
	// Clear the display
	LCD_sendCommand(CLEAR_COMMAND);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	0e 94 01 05 	call	0xa02	; 0xa02 <LCD_sendCommand>
     bba:	8f e9       	ldi	r24, 0x9F	; 159
     bbc:	9f e0       	ldi	r25, 0x0F	; 15
     bbe:	01 97       	sbiw	r24, 0x01	; 1
     bc0:	f1 f7       	brne	.-4      	; 0xbbe <LCD_clear_screen+0xa>
     bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <LCD_clear_screen+0x10>
     bc4:	00 00       	nop
	_delay_ms(2);
	LCD_sendCommand(SHIFT_CURSOR_RIGHT);
     bc6:	86 e0       	ldi	r24, 0x06	; 6
     bc8:	0e 94 01 05 	call	0xa02	; 0xa02 <LCD_sendCommand>
     bcc:	08 95       	ret

00000bce <LCD_goToRowColumn>:
//function to go to a certain position on the LCD
void LCD_goToRowColumn(uint8_t row,uint8_t col)
{
	uint8_t Address;
	// First of all calculate the required address
	switch (row)
     bce:	81 30       	cpi	r24, 0x01	; 1
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <LCD_goToRowColumn+0x6>
	{
		case 0:
			Address = col;
			break;
		case 1:
			Address = col + 0x40;
     bd2:	60 5c       	subi	r22, 0xC0	; 192
			break;
	}
	// To write the specific address in the LCD
	// We need to apply the corresponding command
	// ob10000000 + Address
	LCD_sendCommand(SET_CURSOR_LOCATION | Address);
     bd4:	86 2f       	mov	r24, r22
     bd6:	80 68       	ori	r24, 0x80	; 128
     bd8:	0e 94 01 05 	call	0xa02	; 0xa02 <LCD_sendCommand>
     bdc:	08 95       	ret

00000bde <LCD_displayStringRowColumn>:
	LCD_sendCommand(SHIFT_CURSOR_RIGHT);
}

//function to display a string in a certain (x,y) position
void LCD_displayStringRowColumn(uint8_t row,uint8_t col,const sint8_t *Str)
{
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	ea 01       	movw	r28, r20
	LCD_goToRowColumn(row, col);
     be4:	0e 94 e7 05 	call	0xbce	; 0xbce <LCD_goToRowColumn>
	LCD_sendString(Str);
     be8:	ce 01       	movw	r24, r28
     bea:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LCD_sendString>
}
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	08 95       	ret

00000bf4 <LCD_intgerToString>:
	LCD_sendCommand(SET_CURSOR_LOCATION | Address);
}

//function to convert integer to string and display it
void LCD_intgerToString(sint32_t data)
{
     bf4:	cf 92       	push	r12
     bf6:	df 92       	push	r13
     bf8:	ef 92       	push	r14
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	cd b7       	in	r28, 0x3d	; 61
     c06:	de b7       	in	r29, 0x3e	; 62
     c08:	60 97       	sbiw	r28, 0x10	; 16
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	de bf       	out	0x3e, r29	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	cd bf       	out	0x3d, r28	; 61
     c14:	6b 01       	movw	r12, r22
     c16:	7c 01       	movw	r14, r24
	sint8_t str[16];
	uint8_t i, rem, len = 0;
	sint32_t n;
	
	n= data;
	if(n == 0)
     c18:	61 15       	cp	r22, r1
     c1a:	71 05       	cpc	r23, r1
     c1c:	81 05       	cpc	r24, r1
     c1e:	91 05       	cpc	r25, r1
     c20:	99 f0       	breq	.+38     	; 0xc48 <LCD_intgerToString+0x54>
     c22:	9b 01       	movw	r18, r22
     c24:	ac 01       	movw	r20, r24
     c26:	00 e0       	ldi	r16, 0x00	; 0
     c28:	09 c0       	rjmp	.+18     	; 0xc3c <LCD_intgerToString+0x48>
	}
	else
	{
		while (n != 0)
		{
			len++;
     c2a:	0f 5f       	subi	r16, 0xFF	; 255
			n /= 10;
     c2c:	ca 01       	movw	r24, r20
     c2e:	b9 01       	movw	r22, r18
     c30:	2a e0       	ldi	r18, 0x0A	; 10
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e0       	ldi	r20, 0x00	; 0
     c36:	50 e0       	ldi	r21, 0x00	; 0
     c38:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__divmodsi4>
	{
		len = 1;
	}
	else
	{
		while (n != 0)
     c3c:	21 15       	cp	r18, r1
     c3e:	31 05       	cpc	r19, r1
     c40:	41 05       	cpc	r20, r1
     c42:	51 05       	cpc	r21, r1
     c44:	91 f7       	brne	.-28     	; 0xc2a <LCD_intgerToString+0x36>
     c46:	01 c0       	rjmp	.+2      	; 0xc4a <LCD_intgerToString+0x56>
	sint32_t n;
	
	n= data;
	if(n == 0)
	{
		len = 1;
     c48:	01 e0       	ldi	r16, 0x01	; 1
		{
			len++;
			n /= 10;
		}
	}
	if (len >= 15)
     c4a:	0f 30       	cpi	r16, 0x0F	; 15
     c4c:	48 f5       	brcc	.+82     	; 0xca0 <LCD_intgerToString+0xac>
     c4e:	10 e0       	ldi	r17, 0x00	; 0
     c50:	1a c0       	rjmp	.+52     	; 0xc86 <LCD_intgerToString+0x92>
		return;
	}
	for (i = 0; i < len ; i++)
	{
		rem = data % 10;
		data = data /10;
     c52:	c7 01       	movw	r24, r14
     c54:	b6 01       	movw	r22, r12
     c56:	2a e0       	ldi	r18, 0x0A	; 10
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	40 e0       	ldi	r20, 0x00	; 0
     c5c:	50 e0       	ldi	r21, 0x00	; 0
     c5e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <__divmodsi4>
     c62:	69 01       	movw	r12, r18
     c64:	7a 01       	movw	r14, r20
		str[len - (i + 1)] = rem + '0';
     c66:	81 2f       	mov	r24, r17
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	e0 2f       	mov	r30, r16
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	e8 1b       	sub	r30, r24
     c72:	f9 0b       	sbc	r31, r25
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	8c 0f       	add	r24, r28
     c7a:	9d 1f       	adc	r25, r29
     c7c:	e8 0f       	add	r30, r24
     c7e:	f9 1f       	adc	r31, r25
     c80:	60 5d       	subi	r22, 0xD0	; 208
     c82:	60 83       	st	Z, r22
	}
	if (len >= 15)
	{
		return;
	}
	for (i = 0; i < len ; i++)
     c84:	1f 5f       	subi	r17, 0xFF	; 255
     c86:	10 17       	cp	r17, r16
     c88:	20 f3       	brcs	.-56     	; 0xc52 <LCD_intgerToString+0x5e>
	{
		rem = data % 10;
		data = data /10;
		str[len - (i + 1)] = rem + '0';
	}
	str[len] = '\0';
     c8a:	e1 e0       	ldi	r30, 0x01	; 1
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	ec 0f       	add	r30, r28
     c90:	fd 1f       	adc	r31, r29
     c92:	e0 0f       	add	r30, r16
     c94:	f1 1d       	adc	r31, r1
     c96:	10 82       	st	Z, r1
	LCD_sendString(str);
     c98:	ce 01       	movw	r24, r28
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <LCD_sendString>
}
     ca0:	60 96       	adiw	r28, 0x10	; 16
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	ff 90       	pop	r15
     cb6:	ef 90       	pop	r14
     cb8:	df 90       	pop	r13
     cba:	cf 90       	pop	r12
     cbc:	08 95       	ret

00000cbe <LCD_displayIntegerRowColumn>:
	LCD_sendString(Str);
}

//function to display an integer in a certain (x,y) position
void LCD_displayIntegerRowColumn(uint8_t row,uint8_t col,sint32_t data)
{
     cbe:	cf 92       	push	r12
     cc0:	df 92       	push	r13
     cc2:	ef 92       	push	r14
     cc4:	ff 92       	push	r15
     cc6:	69 01       	movw	r12, r18
     cc8:	7a 01       	movw	r14, r20
	LCD_goToRowColumn(row, col);
     cca:	0e 94 e7 05 	call	0xbce	; 0xbce <LCD_goToRowColumn>
	LCD_intgerToString(data);
     cce:	c7 01       	movw	r24, r14
     cd0:	b6 01       	movw	r22, r12
     cd2:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <LCD_intgerToString>
}
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	df 90       	pop	r13
     cdc:	cf 90       	pop	r12
     cde:	08 95       	ret

00000ce0 <LED_init>:
#include "LEDs.h"

//initialize the LEDs
void LED_init(uint8_t ledPort , uint8_t ledPin)
{
	DIO_init_pin(ledPort,ledPin,OUTPUT);
     ce0:	41 e0       	ldi	r20, 0x01	; 1
     ce2:	0e 94 b1 06 	call	0xd62	; 0xd62 <DIO_init_pin>
     ce6:	08 95       	ret

00000ce8 <LED_ON>:
}

//TURN ON THE LED
void LED_ON(uint8_t ledPort , uint8_t ledPin)
{
	DIO_write_pin(ledPort,ledPin,HIGH);
     ce8:	41 e0       	ldi	r20, 0x01	; 1
     cea:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
     cee:	08 95       	ret

00000cf0 <LED_OFF>:
}

//TURN OFF THE LED
void LED_OFF(uint8_t ledPort , uint8_t ledPin)
{
	DIO_write_pin(ledPort,ledPin,LOW);
     cf0:	40 e0       	ldi	r20, 0x00	; 0
     cf2:	0e 94 40 07 	call	0xe80	; 0xe80 <DIO_write_pin>
     cf6:	08 95       	ret

00000cf8 <main>:

#include "App_layer/app.h"

int main(void)
{
    app_init();
     cf8:	0e 94 4e 00 	call	0x9c	; 0x9c <app_init>
	app_start();
     cfc:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <app_start>
}
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	08 95       	ret

00000d06 <ADC_init>:

//initialization of the ADC
void ADC_init()
{
	// Set all used ADC channels as inputs
	DDRA &= ~ ADC_USED_CHANNELS;
     d06:	8a b3       	in	r24, 0x1a	; 26
     d08:	1a ba       	out	0x1a, r1	; 26
	
	// Select the reference
	#if (ADC_VOLTAGE_REF == ADC_AVCC_SOURCE_5V)
		SET_BIT(ADMUX, REFS0);
     d0a:	87 b1       	in	r24, 0x07	; 7
     d0c:	80 64       	ori	r24, 0x40	; 64
     d0e:	87 b9       	out	0x07, r24	; 7
		CLEAR_BIT(ADMUX, REFS1);
     d10:	87 b1       	in	r24, 0x07	; 7
     d12:	8f 77       	andi	r24, 0x7F	; 127
     d14:	87 b9       	out	0x07, r24	; 7
		SET_BIT(ADMUX, REFS1);
	#endif
	
	// Select the prescaler
	#if (ADC_PRESCALER == ADC_PRESCALER_128)
		SET_BIT(ADCSRA, ADPS0);
     d16:	86 b1       	in	r24, 0x06	; 6
     d18:	81 60       	ori	r24, 0x01	; 1
     d1a:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA, ADPS1);
     d1c:	86 b1       	in	r24, 0x06	; 6
     d1e:	82 60       	ori	r24, 0x02	; 2
     d20:	86 b9       	out	0x06, r24	; 6
		SET_BIT(ADCSRA, ADPS2);
     d22:	86 b1       	in	r24, 0x06	; 6
     d24:	84 60       	ori	r24, 0x04	; 4
     d26:	86 b9       	out	0x06, r24	; 6
	//#elif (ADC_PRESCALER == ADC_PRESCALER_2)
	#endif
	
	// Select right or left adjustment
	#if (ADC_READ_ADJEST == ADC_RIGHT_ADJUST_READ)
		CLEAR_BIT(ADMUX, ADLAR);
     d28:	87 b1       	in	r24, 0x07	; 7
     d2a:	8f 7d       	andi	r24, 0xDF	; 223
     d2c:	87 b9       	out	0x07, r24	; 7
	#else
		SET_BIT(ADMUX, ADLAR);
	#endif
	
	// Enable the ADC
	SET_BIT(ADCSRA, ADEN);
     d2e:	86 b1       	in	r24, 0x06	; 6
     d30:	80 68       	ori	r24, 0x80	; 128
     d32:	86 b9       	out	0x06, r24	; 6
     d34:	08 95       	ret

00000d36 <ADC_read>:
uint16_t ADC_read(EN_ADC_chanel_t channel)
{
	uint16_t ADC_value = 0;
	
	// Select the channel
	ADMUX &= 0b11100000;
     d36:	97 b1       	in	r25, 0x07	; 7
     d38:	90 7e       	andi	r25, 0xE0	; 224
     d3a:	97 b9       	out	0x07, r25	; 7
	ADMUX |= channel;   // Or use switch case 
     d3c:	97 b1       	in	r25, 0x07	; 7
     d3e:	89 2b       	or	r24, r25
     d40:	87 b9       	out	0x07, r24	; 7
	
	// Start conversion
	SET_BIT(ADCSRA, ADSC);
     d42:	86 b1       	in	r24, 0x06	; 6
     d44:	80 64       	ori	r24, 0x40	; 64
     d46:	86 b9       	out	0x06, r24	; 6
	
	// Wait for the conversion to finish
	while (BIT_IS_CLEAR(ADCSRA, ADIF));
     d48:	34 9b       	sbis	0x06, 4	; 6
     d4a:	fe cf       	rjmp	.-4      	; 0xd48 <ADC_read+0x12>
	
	// Clear the interrupt flag by setting logical 1 to it
	SET_BIT(ADCSRA, ADIF);
     d4c:	86 b1       	in	r24, 0x06	; 6
     d4e:	80 61       	ori	r24, 0x10	; 16
     d50:	86 b9       	out	0x06, r24	; 6
	
	// Read the ADC value
	#if (ADC_READ_ADJEST == ADC_RIGHT_ADJUST_READ)
		ADC_value = ADCL + (ADCH << 8);
     d52:	24 b1       	in	r18, 0x04	; 4
     d54:	85 b1       	in	r24, 0x05	; 5
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	98 2f       	mov	r25, r24
     d5a:	88 27       	eor	r24, r24
		ADC_value = (ADCL >> 6) + (ADCH << 2);
	#endif
	
	// Return the value
	return ADC_value;
}
     d5c:	82 0f       	add	r24, r18
     d5e:	91 1d       	adc	r25, r1
     d60:	08 95       	ret

00000d62 <DIO_init_pin>:
		default:
		return DIO_NOT_OK;
		break;
	}
	return DIO_OK;
}
     d62:	82 36       	cpi	r24, 0x62	; 98
     d64:	49 f1       	breq	.+82     	; 0xdb8 <DIO_init_pin+0x56>
     d66:	18 f4       	brcc	.+6      	; 0xd6e <DIO_init_pin+0xc>
     d68:	81 36       	cpi	r24, 0x61	; 97
     d6a:	41 f0       	breq	.+16     	; 0xd7c <DIO_init_pin+0x1a>
     d6c:	7f c0       	rjmp	.+254    	; 0xe6c <DIO_init_pin+0x10a>
     d6e:	83 36       	cpi	r24, 0x63	; 99
     d70:	09 f4       	brne	.+2      	; 0xd74 <DIO_init_pin+0x12>
     d72:	40 c0       	rjmp	.+128    	; 0xdf4 <DIO_init_pin+0x92>
     d74:	84 36       	cpi	r24, 0x64	; 100
     d76:	09 f4       	brne	.+2      	; 0xd7a <DIO_init_pin+0x18>
     d78:	5b c0       	rjmp	.+182    	; 0xe30 <DIO_init_pin+0xce>
     d7a:	78 c0       	rjmp	.+240    	; 0xe6c <DIO_init_pin+0x10a>
     d7c:	44 23       	and	r20, r20
     d7e:	19 f0       	breq	.+6      	; 0xd86 <DIO_init_pin+0x24>
     d80:	41 30       	cpi	r20, 0x01	; 1
     d82:	71 f0       	breq	.+28     	; 0xda0 <DIO_init_pin+0x3e>
     d84:	75 c0       	rjmp	.+234    	; 0xe70 <DIO_init_pin+0x10e>
     d86:	2a b3       	in	r18, 0x1a	; 26
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <DIO_init_pin+0x30>
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	6a 95       	dec	r22
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <DIO_init_pin+0x2c>
     d96:	80 95       	com	r24
     d98:	82 23       	and	r24, r18
     d9a:	8a bb       	out	0x1a, r24	; 26
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	08 95       	ret
     da0:	2a b3       	in	r18, 0x1a	; 26
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	02 c0       	rjmp	.+4      	; 0xdac <DIO_init_pin+0x4a>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	6a 95       	dec	r22
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <DIO_init_pin+0x46>
     db0:	82 2b       	or	r24, r18
     db2:	8a bb       	out	0x1a, r24	; 26
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	08 95       	ret
     db8:	44 23       	and	r20, r20
     dba:	19 f0       	breq	.+6      	; 0xdc2 <DIO_init_pin+0x60>
     dbc:	41 30       	cpi	r20, 0x01	; 1
     dbe:	71 f0       	breq	.+28     	; 0xddc <DIO_init_pin+0x7a>
     dc0:	59 c0       	rjmp	.+178    	; 0xe74 <DIO_init_pin+0x112>
     dc2:	27 b3       	in	r18, 0x17	; 23
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <DIO_init_pin+0x6c>
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	6a 95       	dec	r22
     dd0:	e2 f7       	brpl	.-8      	; 0xdca <DIO_init_pin+0x68>
     dd2:	80 95       	com	r24
     dd4:	82 23       	and	r24, r18
     dd6:	87 bb       	out	0x17, r24	; 23
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	08 95       	ret
     ddc:	27 b3       	in	r18, 0x17	; 23
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <DIO_init_pin+0x86>
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	6a 95       	dec	r22
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <DIO_init_pin+0x82>
     dec:	82 2b       	or	r24, r18
     dee:	87 bb       	out	0x17, r24	; 23
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	08 95       	ret
     df4:	44 23       	and	r20, r20
     df6:	19 f0       	breq	.+6      	; 0xdfe <DIO_init_pin+0x9c>
     df8:	41 30       	cpi	r20, 0x01	; 1
     dfa:	71 f0       	breq	.+28     	; 0xe18 <DIO_init_pin+0xb6>
     dfc:	3d c0       	rjmp	.+122    	; 0xe78 <DIO_init_pin+0x116>
     dfe:	24 b3       	in	r18, 0x14	; 20
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <DIO_init_pin+0xa8>
     e06:	88 0f       	add	r24, r24
     e08:	99 1f       	adc	r25, r25
     e0a:	6a 95       	dec	r22
     e0c:	e2 f7       	brpl	.-8      	; 0xe06 <DIO_init_pin+0xa4>
     e0e:	80 95       	com	r24
     e10:	82 23       	and	r24, r18
     e12:	84 bb       	out	0x14, r24	; 20
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	08 95       	ret
     e18:	24 b3       	in	r18, 0x14	; 20
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_init_pin+0xc2>
     e20:	88 0f       	add	r24, r24
     e22:	99 1f       	adc	r25, r25
     e24:	6a 95       	dec	r22
     e26:	e2 f7       	brpl	.-8      	; 0xe20 <DIO_init_pin+0xbe>
     e28:	82 2b       	or	r24, r18
     e2a:	84 bb       	out	0x14, r24	; 20
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	08 95       	ret
     e30:	44 23       	and	r20, r20
     e32:	19 f0       	breq	.+6      	; 0xe3a <DIO_init_pin+0xd8>
     e34:	41 30       	cpi	r20, 0x01	; 1
     e36:	71 f0       	breq	.+28     	; 0xe54 <DIO_init_pin+0xf2>
     e38:	21 c0       	rjmp	.+66     	; 0xe7c <DIO_init_pin+0x11a>
     e3a:	21 b3       	in	r18, 0x11	; 17
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <DIO_init_pin+0xe4>
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	6a 95       	dec	r22
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <DIO_init_pin+0xe0>
     e4a:	80 95       	com	r24
     e4c:	82 23       	and	r24, r18
     e4e:	81 bb       	out	0x11, r24	; 17
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	08 95       	ret
     e54:	21 b3       	in	r18, 0x11	; 17
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <DIO_init_pin+0xfe>
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	6a 95       	dec	r22
     e62:	e2 f7       	brpl	.-8      	; 0xe5c <DIO_init_pin+0xfa>
     e64:	82 2b       	or	r24, r18
     e66:	81 bb       	out	0x11, r24	; 17
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	08 95       	ret
     e6c:	8f ef       	ldi	r24, 0xFF	; 255
     e6e:	08 95       	ret
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	08 95       	ret
     e74:	8f ef       	ldi	r24, 0xFF	; 255
     e76:	08 95       	ret
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	08 95       	ret
     e7c:	8f ef       	ldi	r24, 0xFF	; 255
     e7e:	08 95       	ret

00000e80 <DIO_write_pin>:
     e80:	82 36       	cpi	r24, 0x62	; 98
     e82:	49 f1       	breq	.+82     	; 0xed6 <DIO_write_pin+0x56>
     e84:	18 f4       	brcc	.+6      	; 0xe8c <DIO_write_pin+0xc>
     e86:	81 36       	cpi	r24, 0x61	; 97
     e88:	41 f0       	breq	.+16     	; 0xe9a <DIO_write_pin+0x1a>
     e8a:	7f c0       	rjmp	.+254    	; 0xf8a <DIO_write_pin+0x10a>
     e8c:	83 36       	cpi	r24, 0x63	; 99
     e8e:	09 f4       	brne	.+2      	; 0xe92 <DIO_write_pin+0x12>
     e90:	40 c0       	rjmp	.+128    	; 0xf12 <DIO_write_pin+0x92>
     e92:	84 36       	cpi	r24, 0x64	; 100
     e94:	09 f4       	brne	.+2      	; 0xe98 <DIO_write_pin+0x18>
     e96:	5b c0       	rjmp	.+182    	; 0xf4e <DIO_write_pin+0xce>
     e98:	78 c0       	rjmp	.+240    	; 0xf8a <DIO_write_pin+0x10a>
     e9a:	44 23       	and	r20, r20
     e9c:	19 f0       	breq	.+6      	; 0xea4 <DIO_write_pin+0x24>
     e9e:	41 30       	cpi	r20, 0x01	; 1
     ea0:	71 f0       	breq	.+28     	; 0xebe <DIO_write_pin+0x3e>
     ea2:	75 c0       	rjmp	.+234    	; 0xf8e <DIO_write_pin+0x10e>
     ea4:	2b b3       	in	r18, 0x1b	; 27
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_write_pin+0x30>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	6a 95       	dec	r22
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_write_pin+0x2c>
     eb4:	80 95       	com	r24
     eb6:	82 23       	and	r24, r18
     eb8:	8b bb       	out	0x1b, r24	; 27
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	08 95       	ret
     ebe:	2b b3       	in	r18, 0x1b	; 27
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <DIO_write_pin+0x4a>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	6a 95       	dec	r22
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <DIO_write_pin+0x46>
     ece:	82 2b       	or	r24, r18
     ed0:	8b bb       	out	0x1b, r24	; 27
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	08 95       	ret
     ed6:	44 23       	and	r20, r20
     ed8:	19 f0       	breq	.+6      	; 0xee0 <DIO_write_pin+0x60>
     eda:	41 30       	cpi	r20, 0x01	; 1
     edc:	71 f0       	breq	.+28     	; 0xefa <DIO_write_pin+0x7a>
     ede:	59 c0       	rjmp	.+178    	; 0xf92 <DIO_write_pin+0x112>
     ee0:	28 b3       	in	r18, 0x18	; 24
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <DIO_write_pin+0x6c>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	6a 95       	dec	r22
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <DIO_write_pin+0x68>
     ef0:	80 95       	com	r24
     ef2:	82 23       	and	r24, r18
     ef4:	88 bb       	out	0x18, r24	; 24
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	08 95       	ret
     efa:	28 b3       	in	r18, 0x18	; 24
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <DIO_write_pin+0x86>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	6a 95       	dec	r22
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <DIO_write_pin+0x82>
     f0a:	82 2b       	or	r24, r18
     f0c:	88 bb       	out	0x18, r24	; 24
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	08 95       	ret
     f12:	44 23       	and	r20, r20
     f14:	19 f0       	breq	.+6      	; 0xf1c <DIO_write_pin+0x9c>
     f16:	41 30       	cpi	r20, 0x01	; 1
     f18:	71 f0       	breq	.+28     	; 0xf36 <DIO_write_pin+0xb6>
     f1a:	3d c0       	rjmp	.+122    	; 0xf96 <DIO_write_pin+0x116>
     f1c:	25 b3       	in	r18, 0x15	; 21
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <DIO_write_pin+0xa8>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	6a 95       	dec	r22
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <DIO_write_pin+0xa4>
     f2c:	80 95       	com	r24
     f2e:	82 23       	and	r24, r18
     f30:	85 bb       	out	0x15, r24	; 21
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	08 95       	ret
     f36:	25 b3       	in	r18, 0x15	; 21
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <DIO_write_pin+0xc2>
     f3e:	88 0f       	add	r24, r24
     f40:	99 1f       	adc	r25, r25
     f42:	6a 95       	dec	r22
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <DIO_write_pin+0xbe>
     f46:	82 2b       	or	r24, r18
     f48:	85 bb       	out	0x15, r24	; 21
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	08 95       	ret
     f4e:	44 23       	and	r20, r20
     f50:	19 f0       	breq	.+6      	; 0xf58 <DIO_write_pin+0xd8>
     f52:	41 30       	cpi	r20, 0x01	; 1
     f54:	71 f0       	breq	.+28     	; 0xf72 <DIO_write_pin+0xf2>
     f56:	21 c0       	rjmp	.+66     	; 0xf9a <DIO_write_pin+0x11a>
     f58:	22 b3       	in	r18, 0x12	; 18
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <DIO_write_pin+0xe4>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	6a 95       	dec	r22
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <DIO_write_pin+0xe0>
     f68:	80 95       	com	r24
     f6a:	82 23       	and	r24, r18
     f6c:	82 bb       	out	0x12, r24	; 18
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	08 95       	ret
     f72:	22 b3       	in	r18, 0x12	; 18
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_write_pin+0xfe>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	6a 95       	dec	r22
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <DIO_write_pin+0xfa>
     f82:	82 2b       	or	r24, r18
     f84:	82 bb       	out	0x12, r24	; 18
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	08 95       	ret
     f8a:	8f ef       	ldi	r24, 0xFF	; 255
     f8c:	08 95       	ret
     f8e:	8f ef       	ldi	r24, 0xFF	; 255
     f90:	08 95       	ret
     f92:	8f ef       	ldi	r24, 0xFF	; 255
     f94:	08 95       	ret
     f96:	8f ef       	ldi	r24, 0xFF	; 255
     f98:	08 95       	ret
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	08 95       	ret

00000f9e <DIO_read_pin>:
     f9e:	82 36       	cpi	r24, 0x62	; 98
     fa0:	09 f1       	breq	.+66     	; 0xfe4 <DIO_read_pin+0x46>
     fa2:	18 f4       	brcc	.+6      	; 0xfaa <DIO_read_pin+0xc>
     fa4:	81 36       	cpi	r24, 0x61	; 97
     fa6:	39 f0       	breq	.+14     	; 0xfb6 <DIO_read_pin+0x18>
     fa8:	62 c0       	rjmp	.+196    	; 0x106e <DIO_read_pin+0xd0>
     faa:	83 36       	cpi	r24, 0x63	; 99
     fac:	91 f1       	breq	.+100    	; 0x1012 <DIO_read_pin+0x74>
     fae:	84 36       	cpi	r24, 0x64	; 100
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <DIO_read_pin+0x16>
     fb2:	46 c0       	rjmp	.+140    	; 0x1040 <DIO_read_pin+0xa2>
     fb4:	5c c0       	rjmp	.+184    	; 0x106e <DIO_read_pin+0xd0>
     fb6:	79 b3       	in	r23, 0x19	; 25
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	9c 01       	movw	r18, r24
     fbe:	06 2e       	mov	r0, r22
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_read_pin+0x28>
     fc2:	22 0f       	add	r18, r18
     fc4:	33 1f       	adc	r19, r19
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_read_pin+0x24>
     fca:	87 2f       	mov	r24, r23
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	82 23       	and	r24, r18
     fd0:	93 23       	and	r25, r19
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <DIO_read_pin+0x3a>
     fd4:	95 95       	asr	r25
     fd6:	87 95       	ror	r24
     fd8:	6a 95       	dec	r22
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <DIO_read_pin+0x36>
     fdc:	fa 01       	movw	r30, r20
     fde:	80 83       	st	Z, r24
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	08 95       	ret
     fe4:	76 b3       	in	r23, 0x16	; 22
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	9c 01       	movw	r18, r24
     fec:	06 2e       	mov	r0, r22
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_read_pin+0x56>
     ff0:	22 0f       	add	r18, r18
     ff2:	33 1f       	adc	r19, r19
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_read_pin+0x52>
     ff8:	87 2f       	mov	r24, r23
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	82 23       	and	r24, r18
     ffe:	93 23       	and	r25, r19
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_read_pin+0x68>
    1002:	95 95       	asr	r25
    1004:	87 95       	ror	r24
    1006:	6a 95       	dec	r22
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_read_pin+0x64>
    100a:	fa 01       	movw	r30, r20
    100c:	80 83       	st	Z, r24
    100e:	80 e0       	ldi	r24, 0x00	; 0
    1010:	08 95       	ret
    1012:	73 b3       	in	r23, 0x13	; 19
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	9c 01       	movw	r18, r24
    101a:	06 2e       	mov	r0, r22
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_read_pin+0x84>
    101e:	22 0f       	add	r18, r18
    1020:	33 1f       	adc	r19, r19
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_read_pin+0x80>
    1026:	87 2f       	mov	r24, r23
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	82 23       	and	r24, r18
    102c:	93 23       	and	r25, r19
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_read_pin+0x96>
    1030:	95 95       	asr	r25
    1032:	87 95       	ror	r24
    1034:	6a 95       	dec	r22
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_read_pin+0x92>
    1038:	fa 01       	movw	r30, r20
    103a:	80 83       	st	Z, r24
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	08 95       	ret
    1040:	70 b3       	in	r23, 0x10	; 16
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	9c 01       	movw	r18, r24
    1048:	06 2e       	mov	r0, r22
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <DIO_read_pin+0xb2>
    104c:	22 0f       	add	r18, r18
    104e:	33 1f       	adc	r19, r19
    1050:	0a 94       	dec	r0
    1052:	e2 f7       	brpl	.-8      	; 0x104c <DIO_read_pin+0xae>
    1054:	87 2f       	mov	r24, r23
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	82 23       	and	r24, r18
    105a:	93 23       	and	r25, r19
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <DIO_read_pin+0xc4>
    105e:	95 95       	asr	r25
    1060:	87 95       	ror	r24
    1062:	6a 95       	dec	r22
    1064:	e2 f7       	brpl	.-8      	; 0x105e <DIO_read_pin+0xc0>
    1066:	fa 01       	movw	r30, r20
    1068:	80 83       	st	Z, r24
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	08 95       	ret
    106e:	8f ef       	ldi	r24, 0xFF	; 255
    1070:	08 95       	ret

00001072 <DIO_init_upper_pins_port>:
    1072:	82 36       	cpi	r24, 0x62	; 98
    1074:	c1 f0       	breq	.+48     	; 0x10a6 <DIO_init_upper_pins_port+0x34>
    1076:	18 f4       	brcc	.+6      	; 0x107e <DIO_init_upper_pins_port+0xc>
    1078:	81 36       	cpi	r24, 0x61	; 97
    107a:	31 f0       	breq	.+12     	; 0x1088 <DIO_init_upper_pins_port+0x16>
    107c:	41 c0       	rjmp	.+130    	; 0x1100 <DIO_init_upper_pins_port+0x8e>
    107e:	83 36       	cpi	r24, 0x63	; 99
    1080:	09 f1       	breq	.+66     	; 0x10c4 <DIO_init_upper_pins_port+0x52>
    1082:	84 36       	cpi	r24, 0x64	; 100
    1084:	71 f1       	breq	.+92     	; 0x10e2 <DIO_init_upper_pins_port+0x70>
    1086:	3c c0       	rjmp	.+120    	; 0x1100 <DIO_init_upper_pins_port+0x8e>
    1088:	66 23       	and	r22, r22
    108a:	19 f0       	breq	.+6      	; 0x1092 <DIO_init_upper_pins_port+0x20>
    108c:	61 30       	cpi	r22, 0x01	; 1
    108e:	31 f0       	breq	.+12     	; 0x109c <DIO_init_upper_pins_port+0x2a>
    1090:	39 c0       	rjmp	.+114    	; 0x1104 <DIO_init_upper_pins_port+0x92>
    1092:	8a b3       	in	r24, 0x1a	; 26
    1094:	8f 70       	andi	r24, 0x0F	; 15
    1096:	8a bb       	out	0x1a, r24	; 26
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	08 95       	ret
    109c:	8a b3       	in	r24, 0x1a	; 26
    109e:	80 6f       	ori	r24, 0xF0	; 240
    10a0:	8a bb       	out	0x1a, r24	; 26
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	08 95       	ret
    10a6:	66 23       	and	r22, r22
    10a8:	19 f0       	breq	.+6      	; 0x10b0 <DIO_init_upper_pins_port+0x3e>
    10aa:	61 30       	cpi	r22, 0x01	; 1
    10ac:	31 f0       	breq	.+12     	; 0x10ba <DIO_init_upper_pins_port+0x48>
    10ae:	2c c0       	rjmp	.+88     	; 0x1108 <DIO_init_upper_pins_port+0x96>
    10b0:	87 b3       	in	r24, 0x17	; 23
    10b2:	8f 70       	andi	r24, 0x0F	; 15
    10b4:	87 bb       	out	0x17, r24	; 23
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	08 95       	ret
    10ba:	87 b3       	in	r24, 0x17	; 23
    10bc:	80 6f       	ori	r24, 0xF0	; 240
    10be:	87 bb       	out	0x17, r24	; 23
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	08 95       	ret
    10c4:	66 23       	and	r22, r22
    10c6:	19 f0       	breq	.+6      	; 0x10ce <DIO_init_upper_pins_port+0x5c>
    10c8:	61 30       	cpi	r22, 0x01	; 1
    10ca:	31 f0       	breq	.+12     	; 0x10d8 <DIO_init_upper_pins_port+0x66>
    10cc:	1f c0       	rjmp	.+62     	; 0x110c <DIO_init_upper_pins_port+0x9a>
    10ce:	84 b3       	in	r24, 0x14	; 20
    10d0:	8f 70       	andi	r24, 0x0F	; 15
    10d2:	84 bb       	out	0x14, r24	; 20
    10d4:	80 e0       	ldi	r24, 0x00	; 0
    10d6:	08 95       	ret
    10d8:	84 b3       	in	r24, 0x14	; 20
    10da:	80 6f       	ori	r24, 0xF0	; 240
    10dc:	84 bb       	out	0x14, r24	; 20
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	08 95       	ret
    10e2:	66 23       	and	r22, r22
    10e4:	19 f0       	breq	.+6      	; 0x10ec <DIO_init_upper_pins_port+0x7a>
    10e6:	61 30       	cpi	r22, 0x01	; 1
    10e8:	31 f0       	breq	.+12     	; 0x10f6 <DIO_init_upper_pins_port+0x84>
    10ea:	12 c0       	rjmp	.+36     	; 0x1110 <DIO_init_upper_pins_port+0x9e>
    10ec:	81 b3       	in	r24, 0x11	; 17
    10ee:	8f 70       	andi	r24, 0x0F	; 15
    10f0:	81 bb       	out	0x11, r24	; 17
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	08 95       	ret
    10f6:	81 b3       	in	r24, 0x11	; 17
    10f8:	80 6f       	ori	r24, 0xF0	; 240
    10fa:	81 bb       	out	0x11, r24	; 17
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	08 95       	ret
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	08 95       	ret
    1104:	8f ef       	ldi	r24, 0xFF	; 255
    1106:	08 95       	ret
    1108:	8f ef       	ldi	r24, 0xFF	; 255
    110a:	08 95       	ret
    110c:	8f ef       	ldi	r24, 0xFF	; 255
    110e:	08 95       	ret
    1110:	8f ef       	ldi	r24, 0xFF	; 255
    1112:	08 95       	ret

00001114 <DIO_write_upper_pins_port>:

//function to write a certain value on the upper pins of the port
//value bits write digital high or low on the corresponding pins. 1 as high and 0 as low
EN_DIO_state_t DIO_write_upper_pins_port(uint8_t port_number , uint8_t value)
{
	switch(port_number)
    1114:	82 36       	cpi	r24, 0x62	; 98
    1116:	79 f0       	breq	.+30     	; 0x1136 <DIO_write_upper_pins_port+0x22>
    1118:	18 f4       	brcc	.+6      	; 0x1120 <DIO_write_upper_pins_port+0xc>
    111a:	81 36       	cpi	r24, 0x61	; 97
    111c:	31 f0       	breq	.+12     	; 0x112a <DIO_write_upper_pins_port+0x16>
    111e:	1d c0       	rjmp	.+58     	; 0x115a <DIO_write_upper_pins_port+0x46>
    1120:	83 36       	cpi	r24, 0x63	; 99
    1122:	79 f0       	breq	.+30     	; 0x1142 <DIO_write_upper_pins_port+0x2e>
    1124:	84 36       	cpi	r24, 0x64	; 100
    1126:	99 f0       	breq	.+38     	; 0x114e <DIO_write_upper_pins_port+0x3a>
    1128:	18 c0       	rjmp	.+48     	; 0x115a <DIO_write_upper_pins_port+0x46>
	{
		case 'a':
		PORTA = (PORTA & 0x0f) | value ;
    112a:	8b b3       	in	r24, 0x1b	; 27
    112c:	8f 70       	andi	r24, 0x0F	; 15
    112e:	68 2b       	or	r22, r24
    1130:	6b bb       	out	0x1b, r22	; 27
		break;
		default:
		return DIO_NOT_OK;
		break;
	}
	return DIO_OK;
    1132:	80 e0       	ldi	r24, 0x00	; 0
{
	switch(port_number)
	{
		case 'a':
		PORTA = (PORTA & 0x0f) | value ;
		break;
    1134:	08 95       	ret
		case 'b':
		PORTB = (PORTB & 0x0f) | value ;
    1136:	88 b3       	in	r24, 0x18	; 24
    1138:	8f 70       	andi	r24, 0x0F	; 15
    113a:	68 2b       	or	r22, r24
    113c:	68 bb       	out	0x18, r22	; 24
		break;
		default:
		return DIO_NOT_OK;
		break;
	}
	return DIO_OK;
    113e:	80 e0       	ldi	r24, 0x00	; 0
		case 'a':
		PORTA = (PORTA & 0x0f) | value ;
		break;
		case 'b':
		PORTB = (PORTB & 0x0f) | value ;
		break;
    1140:	08 95       	ret
		case 'c':
		PORTC = (PORTC & 0x0f) | value ;
    1142:	85 b3       	in	r24, 0x15	; 21
    1144:	8f 70       	andi	r24, 0x0F	; 15
    1146:	68 2b       	or	r22, r24
    1148:	65 bb       	out	0x15, r22	; 21
		break;
		default:
		return DIO_NOT_OK;
		break;
	}
	return DIO_OK;
    114a:	80 e0       	ldi	r24, 0x00	; 0
		case 'b':
		PORTB = (PORTB & 0x0f) | value ;
		break;
		case 'c':
		PORTC = (PORTC & 0x0f) | value ;
		break;
    114c:	08 95       	ret
		case 'd':
		PORTD = (PORTD & 0x0f) | value ;
    114e:	82 b3       	in	r24, 0x12	; 18
    1150:	8f 70       	andi	r24, 0x0F	; 15
    1152:	68 2b       	or	r22, r24
    1154:	62 bb       	out	0x12, r22	; 18
		break;
		default:
		return DIO_NOT_OK;
		break;
	}
	return DIO_OK;
    1156:	80 e0       	ldi	r24, 0x00	; 0
		case 'c':
		PORTC = (PORTC & 0x0f) | value ;
		break;
		case 'd':
		PORTD = (PORTD & 0x0f) | value ;
		break;
    1158:	08 95       	ret
		default:
		return DIO_NOT_OK;
    115a:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	}
	return DIO_OK;
}
    115c:	08 95       	ret

0000115e <EXT_INT_0_init>:

//External interrupt 0 initialization
void EXT_INT_0_init(EN_sinterrupt_sense_t sense)
{
	//1. Enable global interrupt
	sei();
    115e:	78 94       	sei
	
	//2. Choose the interrupt sense on external interrupt 0
	switch (sense)
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	51 f0       	breq	.+20     	; 0x1178 <EXT_INT_0_init+0x1a>
    1164:	28 f0       	brcs	.+10     	; 0x1170 <EXT_INT_0_init+0x12>
    1166:	82 30       	cpi	r24, 0x02	; 2
    1168:	59 f0       	breq	.+22     	; 0x1180 <EXT_INT_0_init+0x22>
    116a:	83 30       	cpi	r24, 0x03	; 3
    116c:	69 f0       	breq	.+26     	; 0x1188 <EXT_INT_0_init+0x2a>
    116e:	0f c0       	rjmp	.+30     	; 0x118e <EXT_INT_0_init+0x30>
	{
		case low_level_sense:
			MCUCR &= ~((1<<ISC00) | (1<<ISC01));  //Low level interrupt
    1170:	85 b7       	in	r24, 0x35	; 53
    1172:	8c 7f       	andi	r24, 0xFC	; 252
    1174:	85 bf       	out	0x35, r24	; 53
			break;
    1176:	0b c0       	rjmp	.+22     	; 0x118e <EXT_INT_0_init+0x30>
		case anyLogicChange_sense:
			MCUCR |= (1<<ISC00);				//Any logic change 
    1178:	85 b7       	in	r24, 0x35	; 53
    117a:	81 60       	ori	r24, 0x01	; 1
    117c:	85 bf       	out	0x35, r24	; 53
			break;
    117e:	07 c0       	rjmp	.+14     	; 0x118e <EXT_INT_0_init+0x30>
		case falling_edge_sense:
			MCUCR |= (1<<ISC01);				//Falling edge trigger
    1180:	85 b7       	in	r24, 0x35	; 53
    1182:	82 60       	ori	r24, 0x02	; 2
    1184:	85 bf       	out	0x35, r24	; 53
			break;
    1186:	03 c0       	rjmp	.+6      	; 0x118e <EXT_INT_0_init+0x30>
		case rising_edge_sense:
			MCUCR |= (1<<ISC01) | (1<<ISC00);	//Rising edge trigger
    1188:	85 b7       	in	r24, 0x35	; 53
    118a:	83 60       	ori	r24, 0x03	; 3
    118c:	85 bf       	out	0x35, r24	; 53
			break;
		default:
			break;
	}
	//3. Enable the external interrupt 0
	GICR |= (1<<INT0);
    118e:	8b b7       	in	r24, 0x3b	; 59
    1190:	80 64       	ori	r24, 0x40	; 64
    1192:	8b bf       	out	0x3b, r24	; 59
    1194:	08 95       	ret

00001196 <i2c_init>:
#include "i2c_MT.h"


void i2c_init(void)
{
	TWSR = 0x00;         // make prescaler =1
    1196:	11 b8       	out	0x01, r1	; 1
	TWBR = (uint8_t)I2C_TWBR_VAL;         
    1198:	88 e0       	ldi	r24, 0x08	; 8
    119a:	80 b9       	out	0x00, r24	; 0
	TWCR = (1<<TWEN);     // Enable I2C Module
    119c:	84 e0       	ldi	r24, 0x04	; 4
    119e:	86 bf       	out	0x36, r24	; 54
    11a0:	08 95       	ret

000011a2 <i2c_start>:
void i2c_start(void)
{
	/*
	 * clear interrupt flag,start condition bit and enable module i2c
	 */
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    11a2:	84 ea       	ldi	r24, 0xA4	; 164
    11a4:	86 bf       	out	0x36, r24	; 54
	/*
	 * Waiting until the start condition is transmitted
	 */
	while ((TWCR&(1<<TWINT))==0);
    11a6:	06 b6       	in	r0, 0x36	; 54
    11a8:	07 fe       	sbrs	r0, 7
    11aa:	fd cf       	rjmp	.-6      	; 0x11a6 <i2c_start+0x4>
}
    11ac:	08 95       	ret

000011ae <i2c_stop>:
void i2c_stop(void)
{
	/*
	 * Enable stop bit
	 */
	TWCR = (1<< TWINT) | (1<< TWEN) | (1<<TWSTO);
    11ae:	84 e9       	ldi	r24, 0x94	; 148
    11b0:	86 bf       	out	0x36, r24	; 54
    11b2:	08 95       	ret

000011b4 <i2c_write>:
void i2c_write (unsigned char data)
{
	/*
	 * Put the data in TW data register
	 */
	TWDR = data;
    11b4:	83 b9       	out	0x03, r24	; 3
	/*
	 * To start sending Byte
	 */
	TWCR = (1<<TWINT) | (1<< TWEN);
    11b6:	84 e8       	ldi	r24, 0x84	; 132
    11b8:	86 bf       	out	0x36, r24	; 54
	/*
	 *waiting until the byte is transmitted completely
	 */
	while ((TWCR & (1<< TWINT)) == 0);
    11ba:	06 b6       	in	r0, 0x36	; 54
    11bc:	07 fe       	sbrs	r0, 7
    11be:	fd cf       	rjmp	.-6      	; 0x11ba <i2c_write+0x6>
}
    11c0:	08 95       	ret

000011c2 <i2c_read>:
unsigned char i2c_read(unsigned char ACK)
{
	/*
	 * To start receiving Byte
	 */
	TWCR = (1<< TWINT) | (1<< TWEN) | (ACK<< TWEA);
    11c2:	20 e4       	ldi	r18, 0x40	; 64
    11c4:	82 9f       	mul	r24, r18
    11c6:	c0 01       	movw	r24, r0
    11c8:	11 24       	eor	r1, r1
    11ca:	84 68       	ori	r24, 0x84	; 132
    11cc:	86 bf       	out	0x36, r24	; 54
	/*
	 *waiting until the byte is transmitted completely
	 */
	while ((TWCR & (1<< TWINT)) == 0);
    11ce:	06 b6       	in	r0, 0x36	; 54
    11d0:	07 fe       	sbrs	r0, 7
    11d2:	fd cf       	rjmp	.-6      	; 0x11ce <i2c_read+0xc>
	/*
	 * Return the data read
	 */
	
	return TWDR;
    11d4:	83 b1       	in	r24, 0x03	; 3
	
}
    11d6:	08 95       	ret

000011d8 <timer0_init>:
			}
			break;
		case CTC_MODE:
			if (ptr_to_ISR_t0ovf != NULL)
			{
				ptr2fun_t0comp = ptr_to_ISR_t0ovf;
    11d8:	12 be       	out	0x32, r1	; 50
    11da:	81 30       	cpi	r24, 0x01	; 1
    11dc:	89 f0       	breq	.+34     	; 0x1200 <timer0_init+0x28>
    11de:	28 f0       	brcs	.+10     	; 0x11ea <timer0_init+0x12>
    11e0:	82 30       	cpi	r24, 0x02	; 2
    11e2:	c9 f0       	breq	.+50     	; 0x1216 <timer0_init+0x3e>
    11e4:	83 30       	cpi	r24, 0x03	; 3
    11e6:	39 f1       	breq	.+78     	; 0x1236 <timer0_init+0x5e>
    11e8:	35 c0       	rjmp	.+106    	; 0x1254 <timer0_init+0x7c>
    11ea:	83 b7       	in	r24, 0x33	; 51
    11ec:	8f 7b       	andi	r24, 0xBF	; 191
    11ee:	83 bf       	out	0x33, r24	; 51
    11f0:	83 b7       	in	r24, 0x33	; 51
    11f2:	87 7f       	andi	r24, 0xF7	; 247
    11f4:	83 bf       	out	0x33, r24	; 51
    11f6:	78 94       	sei
    11f8:	89 b7       	in	r24, 0x39	; 57
    11fa:	81 60       	ori	r24, 0x01	; 1
    11fc:	89 bf       	out	0x39, r24	; 57
    11fe:	2a c0       	rjmp	.+84     	; 0x1254 <timer0_init+0x7c>
    1200:	83 b7       	in	r24, 0x33	; 51
    1202:	8f 7b       	andi	r24, 0xBF	; 191
    1204:	83 bf       	out	0x33, r24	; 51
    1206:	83 b7       	in	r24, 0x33	; 51
    1208:	88 60       	ori	r24, 0x08	; 8
    120a:	83 bf       	out	0x33, r24	; 51
    120c:	78 94       	sei
    120e:	89 b7       	in	r24, 0x39	; 57
    1210:	82 60       	ori	r24, 0x02	; 2
    1212:	89 bf       	out	0x39, r24	; 57
    1214:	1f c0       	rjmp	.+62     	; 0x1254 <timer0_init+0x7c>
    1216:	83 b7       	in	r24, 0x33	; 51
    1218:	80 64       	ori	r24, 0x40	; 64
    121a:	83 bf       	out	0x33, r24	; 51
    121c:	83 b7       	in	r24, 0x33	; 51
    121e:	88 60       	ori	r24, 0x08	; 8
    1220:	83 bf       	out	0x33, r24	; 51
    1222:	83 b7       	in	r24, 0x33	; 51
    1224:	8f 7e       	andi	r24, 0xEF	; 239
    1226:	83 bf       	out	0x33, r24	; 51
    1228:	83 b7       	in	r24, 0x33	; 51
    122a:	80 62       	ori	r24, 0x20	; 32
    122c:	83 bf       	out	0x33, r24	; 51
    122e:	87 b3       	in	r24, 0x17	; 23
    1230:	88 60       	ori	r24, 0x08	; 8
    1232:	87 bb       	out	0x17, r24	; 23
    1234:	0f c0       	rjmp	.+30     	; 0x1254 <timer0_init+0x7c>
    1236:	83 b7       	in	r24, 0x33	; 51
    1238:	80 64       	ori	r24, 0x40	; 64
    123a:	83 bf       	out	0x33, r24	; 51
    123c:	83 b7       	in	r24, 0x33	; 51
    123e:	87 7f       	andi	r24, 0xF7	; 247
    1240:	83 bf       	out	0x33, r24	; 51
    1242:	83 b7       	in	r24, 0x33	; 51
    1244:	8f 7e       	andi	r24, 0xEF	; 239
    1246:	83 bf       	out	0x33, r24	; 51
    1248:	83 b7       	in	r24, 0x33	; 51
    124a:	80 62       	ori	r24, 0x20	; 32
    124c:	83 bf       	out	0x33, r24	; 51
    124e:	87 b3       	in	r24, 0x17	; 23
    1250:	88 60       	ori	r24, 0x08	; 8
    1252:	87 bb       	out	0x17, r24	; 23
    1254:	62 30       	cpi	r22, 0x02	; 2
    1256:	01 f1       	breq	.+64     	; 0x1298 <timer0_init+0xc0>
    1258:	28 f4       	brcc	.+10     	; 0x1264 <timer0_init+0x8c>
    125a:	66 23       	and	r22, r22
    125c:	49 f0       	breq	.+18     	; 0x1270 <timer0_init+0x98>
    125e:	61 30       	cpi	r22, 0x01	; 1
    1260:	89 f0       	breq	.+34     	; 0x1284 <timer0_init+0xac>
    1262:	08 95       	ret
    1264:	64 30       	cpi	r22, 0x04	; 4
    1266:	61 f1       	breq	.+88     	; 0x12c0 <timer0_init+0xe8>
    1268:	08 f1       	brcs	.+66     	; 0x12ac <timer0_init+0xd4>
    126a:	65 30       	cpi	r22, 0x05	; 5
    126c:	99 f1       	breq	.+102    	; 0x12d4 <timer0_init+0xfc>
    126e:	08 95       	ret
    1270:	83 b7       	in	r24, 0x33	; 51
    1272:	8e 7f       	andi	r24, 0xFE	; 254
    1274:	83 bf       	out	0x33, r24	; 51
    1276:	83 b7       	in	r24, 0x33	; 51
    1278:	8d 7f       	andi	r24, 0xFD	; 253
    127a:	83 bf       	out	0x33, r24	; 51
    127c:	83 b7       	in	r24, 0x33	; 51
    127e:	8b 7f       	andi	r24, 0xFB	; 251
    1280:	83 bf       	out	0x33, r24	; 51
    1282:	08 95       	ret
    1284:	83 b7       	in	r24, 0x33	; 51
    1286:	81 60       	ori	r24, 0x01	; 1
    1288:	83 bf       	out	0x33, r24	; 51
    128a:	83 b7       	in	r24, 0x33	; 51
    128c:	8d 7f       	andi	r24, 0xFD	; 253
    128e:	83 bf       	out	0x33, r24	; 51
    1290:	83 b7       	in	r24, 0x33	; 51
    1292:	8b 7f       	andi	r24, 0xFB	; 251
    1294:	83 bf       	out	0x33, r24	; 51
    1296:	08 95       	ret
    1298:	83 b7       	in	r24, 0x33	; 51
    129a:	8e 7f       	andi	r24, 0xFE	; 254
    129c:	83 bf       	out	0x33, r24	; 51
    129e:	83 b7       	in	r24, 0x33	; 51
    12a0:	82 60       	ori	r24, 0x02	; 2
    12a2:	83 bf       	out	0x33, r24	; 51
    12a4:	83 b7       	in	r24, 0x33	; 51
    12a6:	8b 7f       	andi	r24, 0xFB	; 251
    12a8:	83 bf       	out	0x33, r24	; 51
    12aa:	08 95       	ret
    12ac:	83 b7       	in	r24, 0x33	; 51
    12ae:	81 60       	ori	r24, 0x01	; 1
    12b0:	83 bf       	out	0x33, r24	; 51
    12b2:	83 b7       	in	r24, 0x33	; 51
    12b4:	82 60       	ori	r24, 0x02	; 2
    12b6:	83 bf       	out	0x33, r24	; 51
    12b8:	83 b7       	in	r24, 0x33	; 51
    12ba:	8b 7f       	andi	r24, 0xFB	; 251
    12bc:	83 bf       	out	0x33, r24	; 51
    12be:	08 95       	ret
    12c0:	83 b7       	in	r24, 0x33	; 51
    12c2:	8e 7f       	andi	r24, 0xFE	; 254
    12c4:	83 bf       	out	0x33, r24	; 51
    12c6:	83 b7       	in	r24, 0x33	; 51
    12c8:	8d 7f       	andi	r24, 0xFD	; 253
    12ca:	83 bf       	out	0x33, r24	; 51
    12cc:	83 b7       	in	r24, 0x33	; 51
    12ce:	84 60       	ori	r24, 0x04	; 4
    12d0:	83 bf       	out	0x33, r24	; 51
    12d2:	08 95       	ret
    12d4:	83 b7       	in	r24, 0x33	; 51
    12d6:	81 60       	ori	r24, 0x01	; 1
    12d8:	83 bf       	out	0x33, r24	; 51
    12da:	83 b7       	in	r24, 0x33	; 51
    12dc:	8d 7f       	andi	r24, 0xFD	; 253
    12de:	83 bf       	out	0x33, r24	; 51
    12e0:	83 b7       	in	r24, 0x33	; 51
    12e2:	84 60       	ori	r24, 0x04	; 4
    12e4:	83 bf       	out	0x33, r24	; 51
    12e6:	08 95       	ret

000012e8 <Timer0_Set_OCR0>:
    12e8:	8c bf       	out	0x3c, r24	; 60
    12ea:	08 95       	ret

000012ec <timer0_dutyCycle>:
    12ec:	82 30       	cpi	r24, 0x02	; 2
    12ee:	19 f0       	breq	.+6      	; 0x12f6 <timer0_dutyCycle+0xa>
    12f0:	83 30       	cpi	r24, 0x03	; 3
    12f2:	61 f0       	breq	.+24     	; 0x130c <timer0_dutyCycle+0x20>
    12f4:	08 95       	ret
    12f6:	96 2f       	mov	r25, r22
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	64 e6       	ldi	r22, 0x64	; 100
    12fc:	70 e0       	ldi	r23, 0x00	; 0
    12fe:	0e 94 46 0a 	call	0x148c	; 0x148c <__divmodhi4>
    1302:	8f ef       	ldi	r24, 0xFF	; 255
    1304:	86 0f       	add	r24, r22
    1306:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Timer0_Set_OCR0>
    130a:	08 95       	ret
    130c:	2f ef       	ldi	r18, 0xFF	; 255
    130e:	62 9f       	mul	r22, r18
    1310:	c0 01       	movw	r24, r0
    1312:	11 24       	eor	r1, r1
    1314:	64 e6       	ldi	r22, 0x64	; 100
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	0e 94 46 0a 	call	0x148c	; 0x148c <__divmodhi4>
    131c:	86 2f       	mov	r24, r22
    131e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <Timer0_Set_OCR0>
    1322:	08 95       	ret

00001324 <__vector_11>:
	
}


ISR(TIMER0_OVF_vect)
{
    1324:	1f 92       	push	r1
    1326:	0f 92       	push	r0
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	0f 92       	push	r0
    132c:	11 24       	eor	r1, r1
    132e:	2f 93       	push	r18
    1330:	3f 93       	push	r19
    1332:	4f 93       	push	r20
    1334:	5f 93       	push	r21
    1336:	6f 93       	push	r22
    1338:	7f 93       	push	r23
    133a:	8f 93       	push	r24
    133c:	9f 93       	push	r25
    133e:	af 93       	push	r26
    1340:	bf 93       	push	r27
    1342:	ef 93       	push	r30
    1344:	ff 93       	push	r31
	if (ptr2fun_t0ovf != NULL)
    1346:	e0 91 a7 01 	lds	r30, 0x01A7	; 0x8001a7 <ptr2fun_t0ovf>
    134a:	f0 91 a8 01 	lds	r31, 0x01A8	; 0x8001a8 <ptr2fun_t0ovf+0x1>
    134e:	30 97       	sbiw	r30, 0x00	; 0
    1350:	09 f0       	breq	.+2      	; 0x1354 <__vector_11+0x30>
	{
		ptr2fun_t0ovf();		// func();
    1352:	09 95       	icall
	}
}
    1354:	ff 91       	pop	r31
    1356:	ef 91       	pop	r30
    1358:	bf 91       	pop	r27
    135a:	af 91       	pop	r26
    135c:	9f 91       	pop	r25
    135e:	8f 91       	pop	r24
    1360:	7f 91       	pop	r23
    1362:	6f 91       	pop	r22
    1364:	5f 91       	pop	r21
    1366:	4f 91       	pop	r20
    1368:	3f 91       	pop	r19
    136a:	2f 91       	pop	r18
    136c:	0f 90       	pop	r0
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	0f 90       	pop	r0
    1372:	1f 90       	pop	r1
    1374:	18 95       	reti

00001376 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1376:	1f 92       	push	r1
    1378:	0f 92       	push	r0
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	0f 92       	push	r0
    137e:	11 24       	eor	r1, r1
    1380:	2f 93       	push	r18
    1382:	3f 93       	push	r19
    1384:	4f 93       	push	r20
    1386:	5f 93       	push	r21
    1388:	6f 93       	push	r22
    138a:	7f 93       	push	r23
    138c:	8f 93       	push	r24
    138e:	9f 93       	push	r25
    1390:	af 93       	push	r26
    1392:	bf 93       	push	r27
    1394:	ef 93       	push	r30
    1396:	ff 93       	push	r31
	if (ptr2fun_t0comp != NULL)
    1398:	e0 91 a5 01 	lds	r30, 0x01A5	; 0x8001a5 <ptr2fun_t0comp>
    139c:	f0 91 a6 01 	lds	r31, 0x01A6	; 0x8001a6 <ptr2fun_t0comp+0x1>
    13a0:	30 97       	sbiw	r30, 0x00	; 0
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <__vector_10+0x30>
	{
		ptr2fun_t0comp();		// func_comp();
    13a4:	09 95       	icall
	}
    13a6:	ff 91       	pop	r31
    13a8:	ef 91       	pop	r30
    13aa:	bf 91       	pop	r27
    13ac:	af 91       	pop	r26
    13ae:	9f 91       	pop	r25
    13b0:	8f 91       	pop	r24
    13b2:	7f 91       	pop	r23
    13b4:	6f 91       	pop	r22
    13b6:	5f 91       	pop	r21
    13b8:	4f 91       	pop	r20
    13ba:	3f 91       	pop	r19
    13bc:	2f 91       	pop	r18
    13be:	0f 90       	pop	r0
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	0f 90       	pop	r0
    13c4:	1f 90       	pop	r1
    13c6:	18 95       	reti

000013c8 <UART_Init>:

static volatile void (*p2RXC_ISR_Func) (void) = NULL;

void UART_Init( unsigned int baud )
{
	baud= F_CPU/16/baud-1;
    13c8:	9c 01       	movw	r18, r24
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	60 e2       	ldi	r22, 0x20	; 32
    13d0:	71 ea       	ldi	r23, 0xA1	; 161
    13d2:	87 e0       	ldi	r24, 0x07	; 7
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__udivmodsi4>
    13da:	21 50       	subi	r18, 0x01	; 1
    13dc:	31 09       	sbc	r19, r1
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
    13de:	30 bd       	out	0x20, r19	; 32
	UBRRL = (unsigned char)baud;
    13e0:	29 b9       	out	0x09, r18	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
    13e2:	88 e1       	ldi	r24, 0x18	; 24
    13e4:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data,no parity, 1stop bit */
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
    13e6:	86 e8       	ldi	r24, 0x86	; 134
    13e8:	80 bd       	out	0x20, r24	; 32
    13ea:	08 95       	ret

000013ec <UART_Transmit>:
}

void UART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
    13ec:	5d 9b       	sbis	0x0b, 5	; 11
    13ee:	fe cf       	rjmp	.-4      	; 0x13ec <UART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
    13f0:	8c b9       	out	0x0c, r24	; 12
    13f2:	08 95       	ret

000013f4 <UART_RXC_interruptEnable>:
}

void UART_RXC_interruptEnable()
{
	// Enable the RX complete interrupt
	UCSRB |=(1<<RXCIE);
    13f4:	8a b1       	in	r24, 0x0a	; 10
    13f6:	80 68       	ori	r24, 0x80	; 128
    13f8:	8a b9       	out	0x0a, r24	; 10
	
	// Enable the global interrupt
	sei();
    13fa:	78 94       	sei
    13fc:	08 95       	ret

000013fe <UART_Receive>:
}

unsigned char UART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
    13fe:	5f 9b       	sbis	0x0b, 7	; 11
    1400:	fe cf       	rjmp	.-4      	; 0x13fe <UART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR;
    1402:	8c b1       	in	r24, 0x0c	; 12
}
    1404:	08 95       	ret

00001406 <UART_sendString>:

void UART_sendString(sint8_t *str)
{
    1406:	0f 93       	push	r16
    1408:	1f 93       	push	r17
    140a:	cf 93       	push	r28
    140c:	8c 01       	movw	r16, r24
	for(uint8_t i=0;str[i]!='\0';i++)
    140e:	c0 e0       	ldi	r28, 0x00	; 0
    1410:	03 c0       	rjmp	.+6      	; 0x1418 <UART_sendString+0x12>
	{
		UART_Transmit(str[i]);
    1412:	0e 94 f6 09 	call	0x13ec	; 0x13ec <UART_Transmit>
	return UDR;
}

void UART_sendString(sint8_t *str)
{
	for(uint8_t i=0;str[i]!='\0';i++)
    1416:	cf 5f       	subi	r28, 0xFF	; 255
    1418:	f8 01       	movw	r30, r16
    141a:	ec 0f       	add	r30, r28
    141c:	f1 1d       	adc	r31, r1
    141e:	80 81       	ld	r24, Z
    1420:	81 11       	cpse	r24, r1
    1422:	f7 cf       	rjmp	.-18     	; 0x1412 <UART_sendString+0xc>
	{
		UART_Transmit(str[i]);
	}
}
    1424:	cf 91       	pop	r28
    1426:	1f 91       	pop	r17
    1428:	0f 91       	pop	r16
    142a:	08 95       	ret

0000142c <UART_setCallBcak>:


// Call back function to RX complete
void UART_setCallBcak(void (*p2f) (void))
{
	if (p2f != NULL)
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	21 f0       	breq	.+8      	; 0x1438 <UART_setCallBcak+0xc>
	{
		p2RXC_ISR_Func = p2f;
    1430:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <p2RXC_ISR_Func+0x1>
    1434:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <p2RXC_ISR_Func>
    1438:	08 95       	ret

0000143a <__vector_13>:
	}
}

ISR(UART_RXC_VECT)
{
    143a:	1f 92       	push	r1
    143c:	0f 92       	push	r0
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	0f 92       	push	r0
    1442:	11 24       	eor	r1, r1
    1444:	2f 93       	push	r18
    1446:	3f 93       	push	r19
    1448:	4f 93       	push	r20
    144a:	5f 93       	push	r21
    144c:	6f 93       	push	r22
    144e:	7f 93       	push	r23
    1450:	8f 93       	push	r24
    1452:	9f 93       	push	r25
    1454:	af 93       	push	r26
    1456:	bf 93       	push	r27
    1458:	ef 93       	push	r30
    145a:	ff 93       	push	r31
	if (p2RXC_ISR_Func != NULL)
    145c:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <p2RXC_ISR_Func>
    1460:	f0 91 aa 01 	lds	r31, 0x01AA	; 0x8001aa <p2RXC_ISR_Func+0x1>
    1464:	30 97       	sbiw	r30, 0x00	; 0
    1466:	09 f0       	breq	.+2      	; 0x146a <__vector_13+0x30>
	{
		p2RXC_ISR_Func();
    1468:	09 95       	icall
	}
    146a:	ff 91       	pop	r31
    146c:	ef 91       	pop	r30
    146e:	bf 91       	pop	r27
    1470:	af 91       	pop	r26
    1472:	9f 91       	pop	r25
    1474:	8f 91       	pop	r24
    1476:	7f 91       	pop	r23
    1478:	6f 91       	pop	r22
    147a:	5f 91       	pop	r21
    147c:	4f 91       	pop	r20
    147e:	3f 91       	pop	r19
    1480:	2f 91       	pop	r18
    1482:	0f 90       	pop	r0
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	0f 90       	pop	r0
    1488:	1f 90       	pop	r1
    148a:	18 95       	reti

0000148c <__divmodhi4>:
    148c:	97 fb       	bst	r25, 7
    148e:	07 2e       	mov	r0, r23
    1490:	16 f4       	brtc	.+4      	; 0x1496 <__divmodhi4+0xa>
    1492:	00 94       	com	r0
    1494:	07 d0       	rcall	.+14     	; 0x14a4 <__divmodhi4_neg1>
    1496:	77 fd       	sbrc	r23, 7
    1498:	09 d0       	rcall	.+18     	; 0x14ac <__divmodhi4_neg2>
    149a:	0e 94 a6 0a 	call	0x154c	; 0x154c <__udivmodhi4>
    149e:	07 fc       	sbrc	r0, 7
    14a0:	05 d0       	rcall	.+10     	; 0x14ac <__divmodhi4_neg2>
    14a2:	3e f4       	brtc	.+14     	; 0x14b2 <__divmodhi4_exit>

000014a4 <__divmodhi4_neg1>:
    14a4:	90 95       	com	r25
    14a6:	81 95       	neg	r24
    14a8:	9f 4f       	sbci	r25, 0xFF	; 255
    14aa:	08 95       	ret

000014ac <__divmodhi4_neg2>:
    14ac:	70 95       	com	r23
    14ae:	61 95       	neg	r22
    14b0:	7f 4f       	sbci	r23, 0xFF	; 255

000014b2 <__divmodhi4_exit>:
    14b2:	08 95       	ret

000014b4 <__udivmodsi4>:
    14b4:	a1 e2       	ldi	r26, 0x21	; 33
    14b6:	1a 2e       	mov	r1, r26
    14b8:	aa 1b       	sub	r26, r26
    14ba:	bb 1b       	sub	r27, r27
    14bc:	fd 01       	movw	r30, r26
    14be:	0d c0       	rjmp	.+26     	; 0x14da <__udivmodsi4_ep>

000014c0 <__udivmodsi4_loop>:
    14c0:	aa 1f       	adc	r26, r26
    14c2:	bb 1f       	adc	r27, r27
    14c4:	ee 1f       	adc	r30, r30
    14c6:	ff 1f       	adc	r31, r31
    14c8:	a2 17       	cp	r26, r18
    14ca:	b3 07       	cpc	r27, r19
    14cc:	e4 07       	cpc	r30, r20
    14ce:	f5 07       	cpc	r31, r21
    14d0:	20 f0       	brcs	.+8      	; 0x14da <__udivmodsi4_ep>
    14d2:	a2 1b       	sub	r26, r18
    14d4:	b3 0b       	sbc	r27, r19
    14d6:	e4 0b       	sbc	r30, r20
    14d8:	f5 0b       	sbc	r31, r21

000014da <__udivmodsi4_ep>:
    14da:	66 1f       	adc	r22, r22
    14dc:	77 1f       	adc	r23, r23
    14de:	88 1f       	adc	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	1a 94       	dec	r1
    14e4:	69 f7       	brne	.-38     	; 0x14c0 <__udivmodsi4_loop>
    14e6:	60 95       	com	r22
    14e8:	70 95       	com	r23
    14ea:	80 95       	com	r24
    14ec:	90 95       	com	r25
    14ee:	9b 01       	movw	r18, r22
    14f0:	ac 01       	movw	r20, r24
    14f2:	bd 01       	movw	r22, r26
    14f4:	cf 01       	movw	r24, r30
    14f6:	08 95       	ret

000014f8 <__divmodsi4>:
    14f8:	05 2e       	mov	r0, r21
    14fa:	97 fb       	bst	r25, 7
    14fc:	1e f4       	brtc	.+6      	; 0x1504 <__divmodsi4+0xc>
    14fe:	00 94       	com	r0
    1500:	0e 94 93 0a 	call	0x1526	; 0x1526 <__negsi2>
    1504:	57 fd       	sbrc	r21, 7
    1506:	07 d0       	rcall	.+14     	; 0x1516 <__divmodsi4_neg2>
    1508:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <__udivmodsi4>
    150c:	07 fc       	sbrc	r0, 7
    150e:	03 d0       	rcall	.+6      	; 0x1516 <__divmodsi4_neg2>
    1510:	4e f4       	brtc	.+18     	; 0x1524 <__divmodsi4_exit>
    1512:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__negsi2>

00001516 <__divmodsi4_neg2>:
    1516:	50 95       	com	r21
    1518:	40 95       	com	r20
    151a:	30 95       	com	r19
    151c:	21 95       	neg	r18
    151e:	3f 4f       	sbci	r19, 0xFF	; 255
    1520:	4f 4f       	sbci	r20, 0xFF	; 255
    1522:	5f 4f       	sbci	r21, 0xFF	; 255

00001524 <__divmodsi4_exit>:
    1524:	08 95       	ret

00001526 <__negsi2>:
    1526:	90 95       	com	r25
    1528:	80 95       	com	r24
    152a:	70 95       	com	r23
    152c:	61 95       	neg	r22
    152e:	7f 4f       	sbci	r23, 0xFF	; 255
    1530:	8f 4f       	sbci	r24, 0xFF	; 255
    1532:	9f 4f       	sbci	r25, 0xFF	; 255
    1534:	08 95       	ret

00001536 <__muluhisi3>:
    1536:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__umulhisi3>
    153a:	a5 9f       	mul	r26, r21
    153c:	90 0d       	add	r25, r0
    153e:	b4 9f       	mul	r27, r20
    1540:	90 0d       	add	r25, r0
    1542:	a4 9f       	mul	r26, r20
    1544:	80 0d       	add	r24, r0
    1546:	91 1d       	adc	r25, r1
    1548:	11 24       	eor	r1, r1
    154a:	08 95       	ret

0000154c <__udivmodhi4>:
    154c:	aa 1b       	sub	r26, r26
    154e:	bb 1b       	sub	r27, r27
    1550:	51 e1       	ldi	r21, 0x11	; 17
    1552:	07 c0       	rjmp	.+14     	; 0x1562 <__udivmodhi4_ep>

00001554 <__udivmodhi4_loop>:
    1554:	aa 1f       	adc	r26, r26
    1556:	bb 1f       	adc	r27, r27
    1558:	a6 17       	cp	r26, r22
    155a:	b7 07       	cpc	r27, r23
    155c:	10 f0       	brcs	.+4      	; 0x1562 <__udivmodhi4_ep>
    155e:	a6 1b       	sub	r26, r22
    1560:	b7 0b       	sbc	r27, r23

00001562 <__udivmodhi4_ep>:
    1562:	88 1f       	adc	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	5a 95       	dec	r21
    1568:	a9 f7       	brne	.-22     	; 0x1554 <__udivmodhi4_loop>
    156a:	80 95       	com	r24
    156c:	90 95       	com	r25
    156e:	bc 01       	movw	r22, r24
    1570:	cd 01       	movw	r24, r26
    1572:	08 95       	ret

00001574 <__umulhisi3>:
    1574:	a2 9f       	mul	r26, r18
    1576:	b0 01       	movw	r22, r0
    1578:	b3 9f       	mul	r27, r19
    157a:	c0 01       	movw	r24, r0
    157c:	a3 9f       	mul	r26, r19
    157e:	70 0d       	add	r23, r0
    1580:	81 1d       	adc	r24, r1
    1582:	11 24       	eor	r1, r1
    1584:	91 1d       	adc	r25, r1
    1586:	b2 9f       	mul	r27, r18
    1588:	70 0d       	add	r23, r0
    158a:	81 1d       	adc	r24, r1
    158c:	11 24       	eor	r1, r1
    158e:	91 1d       	adc	r25, r1
    1590:	08 95       	ret

00001592 <_exit>:
    1592:	f8 94       	cli

00001594 <__stop_program>:
    1594:	ff cf       	rjmp	.-2      	; 0x1594 <__stop_program>
